{"version":3,"file":"js/382.b1f8177aa06c45bc792f.js","mappings":"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","sources":["webpack://knockoffarcade-enterprise/./src/js/systems/HighScoreManager.js","webpack://knockoffarcade-enterprise/./src/js/systems/AudioManager.js","webpack://knockoffarcade-enterprise/./src/js/Game.js"],"sourcesContent":["/**\n * High Score Manager for KnockoffArcade\n * Handles high score storage, retrieval, and management\n */\n\nexport class HighScoreManager {\n  constructor() {\n    this.storageKey = 'knockoffarcade_highscores';\n    this.maxScores = 10;\n    this.highScores = this.loadHighScores();\n  }\n\n  /**\n   * Load high scores from localStorage\n   * @returns {Array} Array of high score entries\n   */\n  loadHighScores() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        return JSON.parse(stored);\n      }\n    } catch (error) {\n      console.error('Error loading high scores:', error);\n    }\n    \n    // Return default high scores if none exist\n    return [\n      { name: 'Billy the Kid', score: 50000, level: 10, date: '2024-01-01' },\n      { name: 'Jesse James', score: 40000, level: 9, date: '2024-01-01' },\n      { name: 'Wyatt Earp', score: 30000, level: 8, date: '2024-01-01' },\n      { name: 'Doc Holliday', score: 25000, level: 7, date: '2024-01-01' },\n      { name: 'Wild Bill', score: 20000, level: 6, date: '2024-01-01' },\n      { name: 'Calamity Jane', score: 15000, level: 5, date: '2024-01-01' },\n      { name: 'Buffalo Bill', score: 10000, level: 4, date: '2024-01-01' },\n      { name: 'Annie Oakley', score: 7500, level: 3, date: '2024-01-01' },\n      { name: 'Butch Cassidy', score: 5000, level: 3, date: '2024-01-01' },\n      { name: 'Sundance Kid', score: 2500, level: 2, date: '2024-01-01' }\n    ];\n  }\n\n  /**\n   * Save high scores to localStorage\n   */\n  saveHighScores() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.highScores));\n    } catch (error) {\n      console.error('Error saving high scores:', error);\n    }\n  }\n\n  /**\n   * Check if a score qualifies as a high score\n   * @param {number} score - The score to check\n   * @returns {boolean} True if it's a high score\n   */\n  isHighScore(score) {\n    if (this.highScores.length < this.maxScores) {\n      return true;\n    }\n    return score > this.highScores[this.highScores.length - 1].score;\n  }\n\n  /**\n   * Get the rank for a given score\n   * @param {number} score - The score to check\n   * @returns {number} The rank (1-based), or -1 if not a high score\n   */\n  getRank(score) {\n    for (let i = 0; i < this.highScores.length; i++) {\n      if (score > this.highScores[i].score) {\n        return i + 1;\n      }\n    }\n    if (this.highScores.length < this.maxScores) {\n      return this.highScores.length + 1;\n    }\n    return -1;\n  }\n\n  /**\n   * Add a new high score\n   * @param {string} name - Player name\n   * @param {number} score - Player score\n   * @param {number} level - Level reached\n   * @returns {number} The rank achieved (1-based)\n   */\n  addHighScore(name, score, level) {\n    const entry = {\n      name: name.substring(0, 20), // Limit name length\n      score: score,\n      level: level,\n      date: new Date().toISOString().split('T')[0]\n    };\n\n    // Find insertion position\n    let position = this.highScores.length;\n    for (let i = 0; i < this.highScores.length; i++) {\n      if (score > this.highScores[i].score) {\n        position = i;\n        break;\n      }\n    }\n\n    // Insert at position\n    this.highScores.splice(position, 0, entry);\n\n    // Keep only top scores\n    if (this.highScores.length > this.maxScores) {\n      this.highScores = this.highScores.slice(0, this.maxScores);\n    }\n\n    // Save to localStorage\n    this.saveHighScores();\n\n    return position + 1;\n  }\n\n  /**\n   * Get all high scores\n   * @returns {Array} Array of high score entries\n   */\n  getHighScores() {\n    return [...this.highScores];\n  }\n\n  /**\n   * Clear all high scores\n   */\n  clearHighScores() {\n    this.highScores = [];\n    this.saveHighScores();\n  }\n\n  /**\n   * Format score for display\n   * @param {number} score - The score to format\n   * @returns {string} Formatted score string\n   */\n  formatScore(score) {\n    return score.toLocaleString();\n  }\n\n  /**\n   * Generate HTML for high scores display\n   * @returns {string} HTML string for high scores table\n   */\n  generateHighScoresHTML() {\n    if (this.highScores.length === 0) {\n      return '<p style=\"text-align: center; color: #8b4513;\">No high scores yet!</p>';\n    }\n\n    let html = '<table style=\"width: 100%; border-collapse: collapse;\">';\n    html += '<thead><tr style=\"border-bottom: 2px solid #8b4513;\">';\n    html += '<th style=\"text-align: left; padding: 8px; color: #8b4513;\">Rank</th>';\n    html += '<th style=\"text-align: left; padding: 8px; color: #8b4513;\">Name</th>';\n    html += '<th style=\"text-align: right; padding: 8px; color: #8b4513;\">Score</th>';\n    html += '<th style=\"text-align: center; padding: 8px; color: #8b4513;\">Level</th>';\n    html += '</tr></thead><tbody>';\n\n    this.highScores.forEach((entry, index) => {\n      const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '';\n      html += `<tr style=\"border-bottom: 1px solid #deb887;\">`;\n      html += `<td style=\"padding: 8px; color: #5d4037;\">${medal} ${index + 1}</td>`;\n      html += `<td style=\"padding: 8px; color: #5d4037; font-weight: bold;\">${entry.name}</td>`;\n      html += `<td style=\"padding: 8px; text-align: right; color: #8b4513; font-weight: bold;\">${this.formatScore(entry.score)}</td>`;\n      html += `<td style=\"padding: 8px; text-align: center; color: #5d4037;\">${entry.level}</td>`;\n      html += '</tr>';\n    });\n\n    html += '</tbody></table>';\n    return html;\n  }\n}\n\nexport default HighScoreManager;","/**\n * Audio Manager for KnockoffArcade\n * Handles all sound effects and background music\n */\n\nexport class AudioManager {\n  constructor() {\n    this.sounds = new Map();\n    this.context = null;\n    this.masterVolume = 0.7;\n    this.sfxVolume = 0.8;\n    this.musicVolume = 0.4;\n    this.isInitialized = false;\n    this.isMuted = false;\n    this.userHasInteracted = false;\n    this.hasPlayedFirstTrack = false;\n\n    // Music system\n    this.backgroundMusic = null;\n    this.spikeMusic = null;\n    this.currentMusic = null;\n    this.musicGain = null;\n    this.currentMusicSource = null; // Track current audio source\n\n    // Western-themed sound definitions\n    this.soundDefinitions = {\n      // Gunshot for paddle hits\n      paddleHit: {\n        type: 'gunshot',\n        duration: 0.15,\n        volume: 0.8,\n        envelope: { attack: 0.001, decay: 0.05, sustain: 0.1, release: 0.094 }\n      },\n\n      // Spittoon pings for brick breaking (different pitches)\n      brickBreak1: {\n        type: 'spittoon',\n        frequency: 800,\n        duration: 0.2,\n        volume: 0.7,\n        envelope: { attack: 0.01, decay: 0.1, sustain: 0.3, release: 0.09 }\n      },\n\n      brickBreak2: {\n        type: 'spittoon',\n        frequency: 600,\n        duration: 0.18,\n        volume: 0.6,\n        envelope: { attack: 0.01, decay: 0.08, sustain: 0.4, release: 0.09 }\n      },\n\n      brickBreak3: {\n        type: 'spittoon',\n        frequency: 400,\n        duration: 0.22,\n        volume: 0.5,\n        envelope: { attack: 0.01, decay: 0.12, sustain: 0.5, release: 0.08 }\n      },\n\n      // Saloon door creak for power-ups\n      powerUpCollect: {\n        type: 'saloon_door',\n        startFreq: 200,\n        endFreq: 150,\n        duration: 0.4,\n        volume: 0.6,\n        envelope: { attack: 0.05, decay: 0.1, sustain: 0.7, release: 0.25 }\n      },\n\n      // Dramatic \"Aww shucks\" whistle for ball lost\n      ballLost: {\n        type: 'whistle_down',\n        startFreq: 800,\n        endFreq: 200,\n        duration: 0.8,\n        volume: 0.8,\n        envelope: { attack: 0.1, decay: 0.2, sustain: 0.4, release: 0.3 }\n      },\n\n      // Victory harmonica melody\n      levelComplete: {\n        type: 'harmonica',\n        notes: [392, 440, 523, 659, 784], // G4, A4, C5, E5, G5 - Western scale\n        duration: 1.2,\n        volume: 0.7,\n        envelope: { attack: 0.1, decay: 0.05, sustain: 0.8, release: 0.05 }\n      },\n\n      // Dramatic Western chord progression\n      gameOver: {\n        type: 'western_chord',\n        chords: [\n          [220, 277, 330], // A minor\n          [196, 247, 294], // G minor\n          [175, 220, 262]  // F minor\n        ],\n        duration: 1.5,\n        volume: 0.9,\n        envelope: { attack: 0.2, decay: 0.3, sustain: 0.6, release: 0.4 }\n      },\n\n      // \"Yeehaw!\" vocal effects for combos\n      combo3: {\n        type: 'yeehaw',\n        formants: [800, 1200, 2500], // Vocal formants for \"Yee\"\n        duration: 0.3,\n        volume: 0.5,\n        envelope: { attack: 0.02, decay: 0.1, sustain: 0.6, release: 0.18 }\n      },\n\n      combo5: {\n        type: 'yeehaw',\n        formants: [600, 1000, 2200], // \"Haw\" formants\n        duration: 0.4,\n        volume: 0.6,\n        envelope: { attack: 0.02, decay: 0.1, sustain: 0.7, release: 0.28 }\n      },\n\n      combo10: {\n        type: 'yeehaw_big',\n        formants: [500, 900, 2000], // Big \"YEEHAW!\"\n        duration: 0.6,\n        volume: 0.8,\n        envelope: { attack: 0.02, decay: 0.1, sustain: 0.8, release: 0.48 }\n      },\n\n      // Spur jingle for menu sounds\n      menuSelect: {\n        type: 'spur',\n        frequency: 1200,\n        duration: 0.1,\n        volume: 0.4,\n        envelope: { attack: 0.01, decay: 0.03, sustain: 0.2, release: 0.06 }\n      },\n\n      // Horse whinny for menu confirm\n      menuConfirm: {\n        type: 'whinny',\n        startFreq: 400,\n        endFreq: 800,\n        duration: 0.25,\n        volume: 0.5,\n        envelope: { attack: 0.02, decay: 0.08, sustain: 0.4, release: 0.15 }\n      }\n    };\n\n    // Don't initialize audio until user interaction\n  }\n\n  async initializeAudio() {\n    try {\n      // Create Web Audio API context\n      const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n      this.context = new AudioContextClass();\n\n      // Create master gain node\n      this.masterGain = this.context.createGain();\n      this.masterGain.gain.value = this.masterVolume;\n      this.masterGain.connect(this.context.destination);\n\n      // Create music gain node\n      this.musicGain = this.context.createGain();\n      this.musicGain.gain.value = this.musicVolume;\n      this.musicGain.connect(this.masterGain);\n\n      this.isInitialized = true;\n      console.log('AudioManager initialized successfully');\n    } catch (error) {\n      console.warn('Failed to initialize Web Audio API:', error);\n      this.isInitialized = false;\n    }\n  }\n\n  async resumeContext() {\n    if (this.context && this.context.state === 'suspended') {\n      await this.context.resume();\n    }\n  }\n\n  async playSound(soundName, options = {}) {\n    // Don't play anything if user hasn't interacted yet\n    if (!this.userHasInteracted) {\n      console.log('Audio blocked - waiting for user interaction');\n      return;\n    }\n\n    // Initialize audio on first call (after user interaction)\n    if (!this.isInitialized) {\n      await this.initializeAudio();\n    }\n\n    if (!this.isInitialized || this.isMuted || !this.context) {\n      return;\n    }\n\n    await this.resumeContext();\n\n    const soundDef = this.soundDefinitions[soundName];\n    if (!soundDef) {\n      console.warn(`Sound '${soundName}' not found`);\n      return;\n    }\n\n    const volume = (options.volume || soundDef.volume) * this.sfxVolume;\n    const now = this.context.currentTime;\n\n    switch (soundDef.type) {\n      case 'gunshot':\n        this.playGunshot(soundDef, volume, now);\n        break;\n      case 'spittoon':\n        this.playSpittoon(soundDef, volume, now);\n        break;\n      case 'saloon_door':\n        this.playSaloonDoor(soundDef, volume, now);\n        break;\n      case 'whistle_down':\n        this.playWhistleDown(soundDef, volume, now);\n        break;\n      case 'harmonica':\n        this.playHarmonica(soundDef, volume, now);\n        break;\n      case 'western_chord':\n        this.playWesternChord(soundDef, volume, now);\n        break;\n      case 'yeehaw':\n        this.playYeehaw(soundDef, volume, now);\n        break;\n      case 'yeehaw_big':\n        this.playYeehawBig(soundDef, volume, now);\n        break;\n      case 'spur':\n        this.playSpur(soundDef, volume, now);\n        break;\n      case 'whinny':\n        this.playWhinny(soundDef, volume, now);\n        break;\n    }\n  }\n\n  playGunshot(soundDef, volume, startTime) {\n    // Create realistic gunshot with multiple components\n    this.createGunshotBang(volume, startTime);\n    this.createGunshotEcho(volume * 0.4, startTime + 0.1);\n    this.createRicochet(volume * 0.6, startTime + 0.05);\n  }\n\n  createGunshotBang(volume, startTime) {\n    // Sharp crack sound\n    const bufferSize = this.context.sampleRate * 0.1;\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Generate explosive noise with realistic profile\n    for (let i = 0; i < bufferSize; i++) {\n      const t = i / bufferSize;\n      const envelope = Math.exp(-t * 50) * (1 - t); // Sharp attack, quick decay\n      const noise = (Math.random() * 2 - 1);\n      const crack = Math.sin(t * Math.PI * 200) * Math.exp(-t * 30); // Sharp crack component\n      output[i] = (noise * 0.7 + crack * 0.3) * envelope;\n    }\n\n    const source = this.context.createBufferSource();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    source.buffer = buffer;\n    filter.type = 'highpass';\n    filter.frequency.setValueAtTime(400, startTime);\n    filter.Q.setValueAtTime(1, startTime);\n\n    gainNode.gain.setValueAtTime(volume, startTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.1);\n\n    source.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    source.start(startTime);\n  }\n\n  createGunshotEcho(volume, startTime) {\n    // Canyon echo effect\n    const delay = this.context.createDelay(0.5);\n    const feedback = this.context.createGain();\n    const wetGain = this.context.createGain();\n\n    delay.delayTime.setValueAtTime(0.15, startTime);\n    feedback.gain.setValueAtTime(0.3, startTime);\n    wetGain.gain.setValueAtTime(volume, startTime);\n\n    // Create echo source\n    const echoOsc = this.context.createOscillator();\n    const echoGain = this.context.createGain();\n\n    echoOsc.type = 'sawtooth';\n    echoOsc.frequency.setValueAtTime(100, startTime);\n    echoOsc.frequency.linearRampToValueAtTime(50, startTime + 0.8);\n\n    echoGain.gain.setValueAtTime(0, startTime);\n    echoGain.gain.linearRampToValueAtTime(volume * 0.3, startTime + 0.1);\n    echoGain.gain.exponentialRampToValueAtTime(0.001, startTime + 0.8);\n\n    echoOsc.connect(echoGain);\n    echoGain.connect(delay);\n    delay.connect(feedback);\n    feedback.connect(delay);\n    delay.connect(wetGain);\n    wetGain.connect(this.masterGain);\n\n    echoOsc.start(startTime);\n    echoOsc.stop(startTime + 0.8);\n  }\n\n  createRicochet(volume, startTime) {\n    // Ricochet whine\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(800, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(200, startTime + 0.4);\n    oscillator.frequency.linearRampToValueAtTime(150, startTime + 0.6);\n\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.05);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.6);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + 0.6);\n  }\n\n  playSpittoon(soundDef, volume, startTime) {\n    // Create metallic ping sound\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n    const filter = this.context.createBiquadFilter();\n\n    oscillator.type = 'triangle';\n    oscillator.frequency.setValueAtTime(soundDef.frequency, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(soundDef.frequency * 0.7, startTime + soundDef.duration);\n\n    // Add metallic resonance\n    filter.type = 'peaking';\n    filter.frequency.setValueAtTime(soundDef.frequency * 2, startTime);\n    filter.Q.setValueAtTime(15, startTime);\n    filter.gain.setValueAtTime(6, startTime);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  // PLACEHOLDER METHODS - Updated to use spittoon\n  playSweep(soundDef, volume, startTime) {\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sawtooth';\n    oscillator.frequency.setValueAtTime(soundDef.startFreq, startTime);\n    oscillator.frequency.linearRampToValueAtTime(soundDef.endFreq, startTime + soundDef.duration);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  playDescending(soundDef, volume, startTime) {\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'triangle';\n    oscillator.frequency.setValueAtTime(soundDef.startFreq, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(soundDef.endFreq, startTime + soundDef.duration);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  // LEGACY METHOD - Updated to use harmonica\n  playMelody(soundDef, volume, startTime) {\n    this.playHarmonica(soundDef, volume, startTime);\n  }\n\n  // LEGACY METHOD - Updated to use western chord\n  playDramatic(soundDef, volume, startTime) {\n    this.playWesternChord(soundDef, volume, startTime);\n  }\n\n  // LEGACY METHOD - Updated to use whinny\n  playRising(soundDef, volume, startTime) {\n    this.playWhinny(soundDef, volume, startTime);\n  }\n\n  // LEGACY METHOD - Updated to use spur\n  playBlip(soundDef, volume, startTime) {\n    this.playSpur(soundDef, volume, startTime);\n  }\n\n  // LEGACY METHOD - Updated to use whinny\n  playConfirm(soundDef, volume, startTime) {\n    this.playWhinny(soundDef, volume, startTime);\n  }\n\n  playSaloonDoor(soundDef, volume, startTime) {\n    // Create creaky door sound\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sawtooth';\n    oscillator.frequency.setValueAtTime(soundDef.startFreq, startTime);\n    oscillator.frequency.linearRampToValueAtTime(soundDef.endFreq, startTime + soundDef.duration * 0.3);\n    oscillator.frequency.setValueAtTime(soundDef.endFreq, startTime + soundDef.duration * 0.3);\n    oscillator.frequency.linearRampToValueAtTime(soundDef.startFreq * 0.9, startTime + soundDef.duration);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  playWhistleDown(soundDef, volume, startTime) {\n    // Create descending whistle\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(soundDef.startFreq, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(soundDef.endFreq, startTime + soundDef.duration);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  playHarmonica(soundDef, volume, startTime) {\n    // Authentic harmonica with reed simulation and bends\n    const noteDuration = soundDef.duration / soundDef.notes.length;\n\n    soundDef.notes.forEach((frequency, index) => {\n      const noteStartTime = startTime + (index * noteDuration);\n      this.createHarmonicaNote(frequency, volume * 0.8, noteStartTime, noteDuration);\n    });\n  }\n\n  createHarmonicaNote(frequency, volume, startTime, duration) {\n    // Multiple oscillators to simulate harmonica reed overtones\n    const fundamental = this.context.createOscillator();\n    const overtone1 = this.context.createOscillator();\n    const overtone2 = this.context.createOscillator();\n\n    // Vibrato oscillators\n    const vibrato = this.context.createOscillator();\n    const vibratoGain = this.context.createGain();\n\n    // Filter for reed resonance\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    // Main fundamental frequency with slight detuning\n    fundamental.type = 'sawtooth';\n    fundamental.frequency.setValueAtTime(frequency, startTime);\n\n    // Add slight bend at the beginning (characteristic of harmonica)\n    fundamental.frequency.linearRampToValueAtTime(frequency * 0.98, startTime + 0.05);\n    fundamental.frequency.linearRampToValueAtTime(frequency, startTime + 0.1);\n\n    // Overtones for rich harmonica timbre\n    overtone1.type = 'triangle';\n    overtone1.frequency.setValueAtTime(frequency * 2, startTime);\n\n    overtone2.type = 'sine';\n    overtone2.frequency.setValueAtTime(frequency * 3, startTime);\n\n    // Vibrato (characteristic harmonica wobble)\n    vibrato.type = 'sine';\n    vibrato.frequency.setValueAtTime(5.5, startTime); // 5.5Hz vibrato\n    vibratoGain.gain.setValueAtTime(frequency * 0.02, startTime); // 2% vibrato depth\n\n    vibrato.connect(vibratoGain);\n    vibratoGain.connect(fundamental.frequency);\n    vibratoGain.connect(overtone1.frequency);\n\n    // Reed resonance filter\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(frequency * 2, startTime);\n    filter.Q.setValueAtTime(3, startTime);\n\n    // Mix oscillators\n    const mixer = this.context.createGain();\n    const overtone1Gain = this.context.createGain();\n    const overtone2Gain = this.context.createGain();\n\n    overtone1Gain.gain.setValueAtTime(0.3, startTime);\n    overtone2Gain.gain.setValueAtTime(0.15, startTime);\n\n    fundamental.connect(mixer);\n    overtone1.connect(overtone1Gain);\n    overtone1Gain.connect(mixer);\n    overtone2.connect(overtone2Gain);\n    overtone2Gain.connect(mixer);\n\n    mixer.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    // Harmonica breathing envelope (soft attack, sustain, gentle release)\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.1);\n    gainNode.gain.setValueAtTime(volume * 0.9, startTime + duration * 0.7);\n    gainNode.gain.linearRampToValueAtTime(volume * 0.3, startTime + duration * 0.9);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n    // Start all oscillators\n    fundamental.start(startTime);\n    overtone1.start(startTime);\n    overtone2.start(startTime);\n    vibrato.start(startTime);\n\n    // Stop all oscillators\n    fundamental.stop(startTime + duration);\n    overtone1.stop(startTime + duration);\n    overtone2.stop(startTime + duration);\n    vibrato.stop(startTime + duration);\n  }\n\n  playWesternChord(soundDef, volume, startTime) {\n    // Play dramatic chord progression\n    const chordDuration = soundDef.duration / soundDef.chords.length;\n\n    soundDef.chords.forEach((chord, chordIndex) => {\n      const chordStartTime = startTime + (chordIndex * chordDuration);\n\n      chord.forEach((frequency, noteIndex) => {\n        const oscillator = this.context.createOscillator();\n        const gainNode = this.context.createGain();\n\n        oscillator.type = 'sawtooth';\n        oscillator.frequency.setValueAtTime(frequency, chordStartTime);\n\n        const noteVolume = volume / chord.length; // Distribute volume across notes\n        this.applyEnvelope(gainNode.gain, soundDef.envelope, noteVolume, chordStartTime, chordDuration);\n\n        oscillator.connect(gainNode);\n        gainNode.connect(this.masterGain);\n\n        oscillator.start(chordStartTime);\n        oscillator.stop(chordStartTime + chordDuration);\n      });\n    });\n  }\n\n  playYeehaw(soundDef, volume, startTime) {\n    // Create vocal formants for \"Yeehaw\"\n    soundDef.formants.forEach((formant, index) => {\n      const oscillator = this.context.createOscillator();\n      const filter = this.context.createBiquadFilter();\n      const gainNode = this.context.createGain();\n\n      oscillator.type = 'sawtooth';\n      oscillator.frequency.setValueAtTime(150 + index * 50, startTime); // Base frequency\n\n      filter.type = 'peaking';\n      filter.frequency.setValueAtTime(formant, startTime);\n      filter.Q.setValueAtTime(5, startTime);\n      filter.gain.setValueAtTime(10, startTime);\n\n      const formantVolume = volume / soundDef.formants.length;\n      this.applyEnvelope(gainNode.gain, soundDef.envelope, formantVolume, startTime, soundDef.duration);\n\n      oscillator.connect(filter);\n      filter.connect(gainNode);\n      gainNode.connect(this.masterGain);\n\n      oscillator.start(startTime);\n      oscillator.stop(startTime + soundDef.duration);\n    });\n  }\n\n  playYeehawBig(soundDef, volume, startTime) {\n    // Big \"YEEHAW!\" with more formants and vibrato\n    soundDef.formants.forEach((formant, index) => {\n      const oscillator = this.context.createOscillator();\n      const vibrato = this.context.createOscillator();\n      const vibratoGain = this.context.createGain();\n      const filter = this.context.createBiquadFilter();\n      const gainNode = this.context.createGain();\n\n      oscillator.type = 'sawtooth';\n      const baseFreq = 120 + index * 60;\n      oscillator.frequency.setValueAtTime(baseFreq, startTime);\n\n      // Add vibrato\n      vibrato.type = 'sine';\n      vibrato.frequency.setValueAtTime(5, startTime);\n      vibratoGain.gain.setValueAtTime(10, startTime);\n      vibrato.connect(vibratoGain);\n      vibratoGain.connect(oscillator.frequency);\n\n      filter.type = 'peaking';\n      filter.frequency.setValueAtTime(formant, startTime);\n      filter.Q.setValueAtTime(8, startTime);\n      filter.gain.setValueAtTime(15, startTime);\n\n      const formantVolume = volume / soundDef.formants.length;\n      this.applyEnvelope(gainNode.gain, soundDef.envelope, formantVolume, startTime, soundDef.duration);\n\n      oscillator.connect(filter);\n      filter.connect(gainNode);\n      gainNode.connect(this.masterGain);\n\n      oscillator.start(startTime);\n      vibrato.start(startTime);\n      oscillator.stop(startTime + soundDef.duration);\n      vibrato.stop(startTime + soundDef.duration);\n    });\n  }\n\n  playSpur(soundDef, volume, startTime) {\n    // Create spur jingle sound\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'triangle';\n    oscillator.frequency.setValueAtTime(soundDef.frequency, startTime);\n    oscillator.frequency.linearRampToValueAtTime(soundDef.frequency * 1.2, startTime + soundDef.duration * 0.3);\n    oscillator.frequency.linearRampToValueAtTime(soundDef.frequency, startTime + soundDef.duration);\n\n    this.applyEnvelope(gainNode.gain, soundDef.envelope, volume, startTime, soundDef.duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + soundDef.duration);\n  }\n\n  playWhinny(soundDef, volume, startTime) {\n    // Realistic horse whinny with multiple components\n    this.createWhinnyCall(soundDef, volume, startTime);\n    this.createWhinnyBreathe(volume * 0.6, startTime + 0.1);\n    this.createWhinnyTail(volume * 0.4, startTime + soundDef.duration * 0.7);\n  }\n\n  createWhinnyCall(soundDef, volume, startTime) {\n    // Main whinny call with characteristic frequency sweep\n    const osc1 = this.context.createOscillator();\n    const osc2 = this.context.createOscillator();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    // Two oscillators for richer timbre\n    osc1.type = 'sawtooth';\n    osc2.type = 'triangle';\n\n    // Characteristic horse whinny frequency pattern\n    osc1.frequency.setValueAtTime(soundDef.startFreq, startTime);\n    osc1.frequency.linearRampToValueAtTime(soundDef.endFreq, startTime + 0.1);\n    osc1.frequency.linearRampToValueAtTime(soundDef.startFreq * 0.7, startTime + 0.15);\n    osc1.frequency.linearRampToValueAtTime(soundDef.endFreq * 1.2, startTime + 0.2);\n    osc1.frequency.exponentialRampToValueAtTime(soundDef.startFreq * 0.6, startTime + soundDef.duration);\n\n    // Second oscillator slightly detuned\n    osc2.frequency.setValueAtTime(soundDef.startFreq * 1.02, startTime);\n    osc2.frequency.linearRampToValueAtTime(soundDef.endFreq * 1.02, startTime + 0.1);\n    osc2.frequency.linearRampToValueAtTime(soundDef.startFreq * 0.72, startTime + 0.15);\n    osc2.frequency.linearRampToValueAtTime(soundDef.endFreq * 1.22, startTime + 0.2);\n    osc2.frequency.exponentialRampToValueAtTime(soundDef.startFreq * 0.62, startTime + soundDef.duration);\n\n    // Filter to simulate horse vocal tract\n    filter.type = 'lowpass';\n    filter.frequency.setValueAtTime(800, startTime);\n    filter.frequency.linearRampToValueAtTime(1200, startTime + 0.1);\n    filter.frequency.linearRampToValueAtTime(600, startTime + soundDef.duration);\n    filter.Q.setValueAtTime(2, startTime);\n\n    // Whinny envelope (sharp attack, irregular sustain)\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.03);\n    gainNode.gain.setValueAtTime(volume * 0.8, startTime + 0.1);\n    gainNode.gain.linearRampToValueAtTime(volume * 0.9, startTime + 0.15);\n    gainNode.gain.setValueAtTime(volume * 0.6, startTime + 0.2);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + soundDef.duration);\n\n    osc1.connect(filter);\n    osc2.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    osc1.start(startTime);\n    osc2.start(startTime);\n    osc1.stop(startTime + soundDef.duration);\n    osc2.stop(startTime + soundDef.duration);\n  }\n\n  createWhinnyBreathe(volume, startTime) {\n    // Breathing/snort component\n    const bufferSize = this.context.sampleRate * 0.15;\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Generate breathing noise\n    for (let i = 0; i < bufferSize; i++) {\n      const t = i / bufferSize;\n      const envelope = Math.sin(t * Math.PI) * 0.7;\n      output[i] = (Math.random() * 2 - 1) * envelope;\n    }\n\n    const source = this.context.createBufferSource();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    source.buffer = buffer;\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(300, startTime);\n    filter.Q.setValueAtTime(0.5, startTime);\n\n    gainNode.gain.setValueAtTime(volume, startTime);\n\n    source.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    source.start(startTime);\n  }\n\n  createWhinnyTail(volume, startTime) {\n    // Soft trailing off sound\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(200, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(120, startTime + 0.3);\n\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.05);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.3);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.masterGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + 0.3);\n  }\n\n  applyEnvelope(gainParam, envelope, maxVolume, startTime, duration) {\n    const { attack, decay, sustain, release } = envelope;\n    const sustainLevel = maxVolume * sustain;\n\n    gainParam.setValueAtTime(0, startTime);\n    gainParam.linearRampToValueAtTime(maxVolume, startTime + attack);\n    gainParam.linearRampToValueAtTime(sustainLevel, startTime + attack + decay);\n    gainParam.setValueAtTime(sustainLevel, startTime + duration - release);\n    gainParam.exponentialRampToValueAtTime(0.001, startTime + duration);\n  }\n\n  // Random brick break sound selection\n  playBrickBreak() {\n    const sounds = ['brickBreak1', 'brickBreak2', 'brickBreak3'];\n    const randomSound = sounds[Math.floor(Math.random() * sounds.length)];\n    this.playSound(randomSound);\n  }\n\n  // Combo sound based on combo count\n  playComboSound(comboCount) {\n    if (comboCount >= 10) {\n      this.playSound('combo10');\n    } else if (comboCount >= 5) {\n      this.playSound('combo5');\n    } else if (comboCount >= 3) {\n      this.playSound('combo3');\n    }\n  }\n\n  // Music system methods\n  // REMOVED: createBackgroundMusic() - We only use audio files now\n\n  // REMOVED: createSpikeMusic() - We only use audio files now\n\n  async startBackgroundMusic() {\n    console.log('startBackgroundMusic called');\n\n    // Mark that user has interacted\n    this.userHasInteracted = true;\n\n    // Initialize audio on first call (after user interaction)\n    if (!this.isInitialized) {\n      console.log('Initializing audio after user interaction');\n      await this.initializeAudio();\n    }\n\n    console.log('Audio context state:', this.context ? this.context.state : 'no context');\n    console.log('Is initialized:', this.isInitialized);\n    console.log('Is muted:', this.isMuted);\n\n    // Setup music files if not already done\n    if (!this.musicFiles) {\n      this.musicFiles = [\n        './assets/sounds/harmonica 1 tunes - bar 141 - Eitan Epstein Music - main.wav',\n        './assets/sounds/The Western short version.wav',\n        './assets/sounds/Western.mp3',\n        './assets/sounds/Western (Full Version).mp3',\n        './assets/sounds/Country Western/Country Western 01.mp3',\n        './assets/sounds/Country/Country.mp3',\n        './assets/sounds/Country Ways.mp3',\n        './assets/sounds/Lady Fortune.mp3',\n        './assets/sounds/Traveling Through.mp3',\n        './assets/sounds/CountryHoedown_96_JHungerX.wav',\n        './assets/sounds/Funny Country.wav',\n        './assets/sounds/Uplifting Country 2.wav',\n        './assets/sounds/acd c tunes 02a - bar 1225 - eitan-ep - main.wav'\n      ];\n      this.currentTrackIndex = 0;\n    }\n\n    // Set current music to audio files only - NO SYNTHESIZED MUSIC!\n    this.currentMusic = { melody: 'audio_files', type: 'background', startTime: this.context.currentTime };\n\n    // Play audio files directly\n    this.playNextAudioTrack();\n  }\n\n  startSpikeMusic() {\n    // Don't interrupt the WAV file music for spike events\n    // The WAV files are the primary music system now\n    return;\n  }\n\n\n  async playNextAudioTrack() {\n    if (!this.isInitialized || this.isMuted || !this.currentMusic) return;\n\n    try {\n      // Ensure audio context is resumed (required by modern browsers)\n      await this.resumeContext();\n\n      // Cycle through main songs only\n      const trackPath = this.musicFiles[this.currentTrackIndex % this.musicFiles.length];\n      console.log(`Loading main song: ${trackPath}`);\n\n      // Fetch and decode the audio file\n      const response = await fetch(trackPath);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${trackPath}: ${response.status}`);\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      console.log(`Track loaded: ${trackPath}, duration: ${audioBuffer.duration}s`);\n\n      // Create and configure the audio source\n      const source = this.context.createBufferSource();\n      source.buffer = audioBuffer;\n\n      // Store this source so we can stop it if needed\n      this.currentMusicSource = source;\n\n      // Create a gain node for fade-in effect\n      const trackGain = this.context.createGain();\n      source.connect(trackGain);\n      trackGain.connect(this.musicGain);\n\n      // Check if this is the first track (music just started)\n      const isFirstTrack = !this.hasPlayedFirstTrack;\n      if (isFirstTrack) {\n        this.hasPlayedFirstTrack = true;\n      }\n\n      // Set initial volume and fade-in if it's the first track\n      if (isFirstTrack) {\n        trackGain.gain.setValueAtTime(0, this.context.currentTime);\n        trackGain.gain.linearRampToValueAtTime(1, this.context.currentTime + 3); // 3-second fade-in\n        console.log(`Now playing with fade-in: ${trackPath}`);\n      } else {\n        trackGain.gain.setValueAtTime(1, this.context.currentTime);\n        console.log(`Now playing: ${trackPath}`);\n      }\n\n      // Start playing\n      source.start(0);\n\n      // Schedule the next track\n      const trackDuration = audioBuffer.duration;\n      setTimeout(() => {\n        if (this.currentMusic && this.currentMusic.melody === 'audio_files') {\n          // Move to next song\n          this.currentTrackIndex++;\n\n          // Wait 2 seconds between tracks\n          setTimeout(() => {\n            if (this.currentMusic && this.currentMusic.melody === 'audio_files') {\n              this.playNextAudioTrack();\n            }\n          }, 2000);\n        }\n      }, trackDuration * 1000);\n\n    } catch (error) {\n      console.error('Error playing audio track:', error);\n      console.error('Track path:', trackPath);\n      console.error('Audio context state:', this.context.state);\n      console.error('Is initialized:', this.isInitialized);\n      console.error('Is muted:', this.isMuted);\n\n      // Try next track after 3 seconds if current one fails\n      setTimeout(() => {\n        if (this.currentMusic && this.currentMusic.melody === 'audio_files') {\n          // Move to next track and try again\n          this.currentTrackIndex++;\n          this.playNextAudioTrack();\n        }\n      }, 3000);\n    }\n  }\n\n  playMelodyInternal(melody, noteIndex, startTime) {\n    if (!this.isInitialized || !this.currentMusic) return;\n\n    if (noteIndex >= melody.length) {\n      // Loop the melody after a short pause\n      setTimeout(() => {\n        if (this.currentMusic && this.currentMusic.melody === melody) {\n          this.playMelodyInternal(melody, 0, this.context.currentTime + 1.5);\n        }\n      }, 1500);\n      return;\n    }\n\n    const note = melody[noteIndex];\n    if (note.note === 0) {\n      // Rest - just schedule next note\n      setTimeout(() => {\n        if (this.currentMusic && this.currentMusic.melody === melody) {\n          this.playMelodyInternal(melody, noteIndex + 1, startTime + note.duration);\n        }\n      }, note.duration * 1000);\n      return;\n    }\n\n    // Create a richer Western-style instrumentation\n    this.playWesternMelodyNote(note.note, note.duration, startTime);\n    this.playWesternHarmony(note.note, note.duration, startTime);\n\n    // Schedule next note\n    setTimeout(() => {\n      if (this.currentMusic && this.currentMusic.melody === melody) {\n        this.playMelodyInternal(melody, noteIndex + 1, startTime + note.duration);\n      }\n    }, note.duration * 1000);\n  }\n\n  playWesternMelodyNote(frequency, duration, startTime) {\n    // Main melody with guitar-like sound\n    const fundamental = this.context.createOscillator();\n    const harmonics = this.context.createOscillator();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    // Guitar-like timbre\n    fundamental.type = 'sawtooth';\n    fundamental.frequency.setValueAtTime(frequency, startTime);\n\n    harmonics.type = 'triangle';\n    harmonics.frequency.setValueAtTime(frequency * 2, startTime);\n\n    // Warm filter for guitar sound\n    filter.type = 'lowpass';\n    filter.frequency.setValueAtTime(frequency * 4, startTime);\n    filter.Q.setValueAtTime(1, startTime);\n\n    // Mix oscillators\n    const harmonicsGain = this.context.createGain();\n    harmonicsGain.gain.setValueAtTime(0.3, startTime);\n\n    fundamental.connect(filter);\n    harmonics.connect(harmonicsGain);\n    harmonicsGain.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    // Gentle guitar-like envelope\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(this.musicVolume * 0.4, startTime + 0.1);\n    gainNode.gain.setValueAtTime(this.musicVolume * 0.35, startTime + duration * 0.7);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n    fundamental.start(startTime);\n    harmonics.start(startTime);\n    fundamental.stop(startTime + duration);\n    harmonics.stop(startTime + duration);\n  }\n\n  playWesternHarmony(frequency, duration, startTime) {\n    // Add subtle harmonic accompaniment\n    const harmonyFreq = frequency * 0.75; // Perfect fifth below\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(harmonyFreq, startTime);\n\n    // Very quiet harmony\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(this.musicVolume * 0.15, startTime + 0.2);\n    gainNode.gain.setValueAtTime(this.musicVolume * 0.1, startTime + duration * 0.8);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + duration);\n  }\n\n  playRandomChords() {\n    if (!this.isInitialized || !this.currentMusic || this.isMuted) return;\n\n    // Pick a random chord\n    const randomChord = this.westernChords[Math.floor(Math.random() * this.westernChords.length)];\n\n    // Fixed duration for 4 beats (assuming 120 BPM = 0.5 seconds per beat)\n    const beatsPerMinute = 120;\n    const secondsPerBeat = 60 / beatsPerMinute;\n    const duration = 4 * secondsPerBeat; // 4 beats = 2 seconds\n\n    // Play Western band arrangement\n    this.playAcousticGuitar(randomChord, duration, this.context.currentTime);\n    this.playUprigthBass(randomChord, duration, this.context.currentTime);\n    this.playBanjo(randomChord, duration, this.context.currentTime + 0.1);\n    this.playFiddle(randomChord, duration, this.context.currentTime + 0.3);\n    this.playSimpleDrums(duration, this.context.currentTime);\n\n    // Schedule next random chord\n    setTimeout(() => {\n      if (this.currentMusic && this.currentMusic.melody === 'random_chords') {\n        this.playRandomChords();\n      }\n    }, duration * 1000);\n  }\n\n  playAcousticGuitar(chord, duration, startTime) {\n    // Strum pattern: down-up-down-up in 4 beats\n    const strumTimes = [0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75];\n\n    strumTimes.forEach((beatOffset, index) => {\n      const strumTime = startTime + beatOffset;\n      const isDownstroke = index % 2 === 0;\n\n      // Play chord notes with slight delay between strings\n      chord.notes.forEach((frequency, stringIndex) => {\n        const stringTime = strumTime + (stringIndex * 0.01);\n        const oscillator = this.context.createOscillator();\n        const gainNode = this.context.createGain();\n        const filter = this.context.createBiquadFilter();\n\n        // Guitar timbre\n        oscillator.type = 'sawtooth';\n        oscillator.frequency.setValueAtTime(frequency, stringTime);\n\n        // Guitar body resonance\n        filter.type = 'lowpass';\n        filter.frequency.setValueAtTime(frequency * 4, stringTime);\n        filter.Q.setValueAtTime(0.7, stringTime);\n\n        // Strum dynamics\n        const volume = (this.musicVolume * 0.15) * (isDownstroke ? 1.0 : 0.7);\n        gainNode.gain.setValueAtTime(0, stringTime);\n        gainNode.gain.linearRampToValueAtTime(volume, stringTime + 0.02);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, stringTime + 0.4);\n\n        oscillator.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(this.musicGain);\n\n        oscillator.start(stringTime);\n        oscillator.stop(stringTime + 0.4);\n      });\n    });\n  }\n\n  playUprigthBass(chord, duration, startTime) {\n    // Walking bass pattern\n    const bassNotes = [chord.bass, chord.bass * 1.25, chord.bass * 1.5, chord.bass * 1.25];\n    const beatLength = duration / 4;\n\n    bassNotes.forEach((frequency, beat) => {\n      const noteTime = startTime + (beat * beatLength);\n      const oscillator = this.context.createOscillator();\n      const gainNode = this.context.createGain();\n      const filter = this.context.createBiquadFilter();\n\n      // Upright bass timbre\n      oscillator.type = 'triangle';\n      oscillator.frequency.setValueAtTime(frequency, noteTime);\n\n      // Bass warmth\n      filter.type = 'lowpass';\n      filter.frequency.setValueAtTime(frequency * 3, noteTime);\n      filter.Q.setValueAtTime(1.2, noteTime);\n\n      // Bass envelope - punchy attack, warm sustain\n      const volume = this.musicVolume * 0.25;\n      gainNode.gain.setValueAtTime(0, noteTime);\n      gainNode.gain.linearRampToValueAtTime(volume, noteTime + 0.05);\n      gainNode.gain.setValueAtTime(volume * 0.6, noteTime + beatLength * 0.8);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, noteTime + beatLength);\n\n      oscillator.connect(filter);\n      filter.connect(gainNode);\n      gainNode.connect(this.musicGain);\n\n      oscillator.start(noteTime);\n      oscillator.stop(noteTime + beatLength);\n    });\n  }\n\n  playBanjo(chord, duration, startTime) {\n    // Banjo picking pattern - arpeggiated notes\n    const pickingPattern = [0, 2, 1, 2, 0, 2, 1, 2]; // Index into chord notes\n    const sixteenthNote = duration / 16;\n\n    for (let i = 0; i < 16; i++) {\n      if (Math.random() < 0.7) { // Not every note played\n        const noteTime = startTime + (i * sixteenthNote);\n        const chordIndex = pickingPattern[i % pickingPattern.length];\n        const frequency = chord.notes[chordIndex] * (1 + Math.random() * 0.5); // Vary octave\n\n        const oscillator = this.context.createOscillator();\n        const gainNode = this.context.createGain();\n        const filter = this.context.createBiquadFilter();\n\n        // Bright banjo sound\n        oscillator.type = 'square';\n        oscillator.frequency.setValueAtTime(frequency, noteTime);\n\n        // Banjo brightness\n        filter.type = 'highpass';\n        filter.frequency.setValueAtTime(frequency * 0.5, noteTime);\n        filter.Q.setValueAtTime(0.5, noteTime);\n\n        // Quick pluck\n        const volume = this.musicVolume * 0.08;\n        gainNode.gain.setValueAtTime(volume, noteTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, noteTime + 0.2);\n\n        oscillator.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(this.musicGain);\n\n        oscillator.start(noteTime);\n        oscillator.stop(noteTime + 0.2);\n      }\n    }\n  }\n\n  playFiddle(chord, duration, startTime) {\n    // Simple fiddle melody based on chord tones\n    const melodyNotes = [\n      chord.notes[0] * 2,      // Root up an octave\n      chord.notes[1] * 2,      // Third up an octave\n      chord.notes[2] * 2,      // Fifth up an octave\n      chord.notes[0] * 2.5     // Root up higher\n    ];\n\n    const noteLength = duration / 4;\n\n    melodyNotes.forEach((frequency, index) => {\n      if (Math.random() < 0.6) { // Sparse melody\n        const noteTime = startTime + (index * noteLength);\n        const oscillator = this.context.createOscillator();\n        const gainNode = this.context.createGain();\n        const filter = this.context.createBiquadFilter();\n\n        // Fiddle/violin timbre\n        oscillator.type = 'sawtooth';\n        oscillator.frequency.setValueAtTime(frequency, noteTime);\n\n        // Add vibrato\n        const vibrato = this.context.createOscillator();\n        const vibratoGain = this.context.createGain();\n        vibrato.type = 'sine';\n        vibrato.frequency.setValueAtTime(6, noteTime);\n        vibratoGain.gain.setValueAtTime(frequency * 0.02, noteTime);\n\n        vibrato.connect(vibratoGain);\n        vibratoGain.connect(oscillator.frequency);\n\n        // Fiddle resonance\n        filter.type = 'bandpass';\n        filter.frequency.setValueAtTime(frequency * 1.5, noteTime);\n        filter.Q.setValueAtTime(2, noteTime);\n\n        // Bowed envelope\n        const volume = this.musicVolume * 0.1;\n        gainNode.gain.setValueAtTime(0, noteTime);\n        gainNode.gain.linearRampToValueAtTime(volume, noteTime + 0.1);\n        gainNode.gain.setValueAtTime(volume * 0.8, noteTime + noteLength * 0.7);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, noteTime + noteLength);\n\n        oscillator.connect(filter);\n        filter.connect(gainNode);\n        gainNode.connect(this.musicGain);\n\n        oscillator.start(noteTime);\n        vibrato.start(noteTime);\n        oscillator.stop(noteTime + noteLength);\n        vibrato.stop(noteTime + noteLength);\n      }\n    });\n  }\n\n  playSimpleDrums(duration, startTime) {\n    const beatLength = duration / 4;\n\n    for (let beat = 0; beat < 4; beat++) {\n      const beatTime = startTime + (beat * beatLength);\n\n      // Simple kick on 1 and 3\n      if (beat === 0 || beat === 2) {\n        this.playKickDrum(beatTime);\n      }\n\n      // Snare on 2 and 4\n      if (beat === 1 || beat === 3) {\n        this.playSnare(beatTime);\n      }\n\n      // Subtle hi-hat on off-beats\n      if (Math.random() < 0.4) {\n        this.playHiHat(beatTime + beatLength / 2);\n      }\n    }\n  }\n\n  playRandomMelody(chord, chordDuration, startTime) {\n    // Generate a short random melody (3-6 notes)\n    const melodyLength = 3 + Math.floor(Math.random() * 4);\n    const noteDuration = (chordDuration - 1) / melodyLength; // Leave space at end\n\n    // Get chord-appropriate melody notes\n    const chordNotes = this.getChordMelodyNotes(chord);\n\n    for (let i = 0; i < melodyLength; i++) {\n      const noteStartTime = startTime + (i * noteDuration);\n\n      // Pick random note that fits the chord\n      const randomNote = chordNotes[Math.floor(Math.random() * chordNotes.length)];\n\n      // 20% chance of rest (silence)\n      if (Math.random() < 0.2) {\n        continue; // Skip this note (create a rest)\n      }\n\n      this.playMelodyNote(randomNote, noteDuration * 0.8, noteStartTime); // Slightly shorter than full duration\n    }\n  }\n\n  getChordMelodyNotes(chord) {\n    // Create melody notes that harmonically fit the chord\n    const melodyNotes = [];\n\n    // Add the chord tones in higher octaves\n    chord.forEach(frequency => {\n      melodyNotes.push(frequency * 2);     // One octave up\n      melodyNotes.push(frequency * 1.5);   // Perfect fifth up\n      if (frequency * 4 < 1000) {          // Two octaves up (if not too high)\n        melodyNotes.push(frequency * 4);\n      }\n    });\n\n    // Add some passing tones that work with Western harmony\n    const rootFreq = chord[0]; // Base frequency of chord\n\n    // Add major scale intervals from the root\n    melodyNotes.push(rootFreq * 1.125);  // Major second\n    melodyNotes.push(rootFreq * 1.25);   // Major third\n    melodyNotes.push(rootFreq * 1.5);    // Perfect fifth\n    melodyNotes.push(rootFreq * 1.67);   // Minor sixth\n    melodyNotes.push(rootFreq * 1.875);  // Major seventh\n\n    // Add higher octave versions\n    melodyNotes.push(rootFreq * 2.25);   // Major second (octave up)\n    melodyNotes.push(rootFreq * 2.5);    // Major third (octave up)\n    melodyNotes.push(rootFreq * 3);      // Perfect fifth (octave up)\n\n    return melodyNotes.filter(freq => freq >= 200 && freq <= 1000); // Keep in reasonable range\n  }\n\n  playPolyrhythms(chord, duration, startTime) {\n    const beatsPerMinute = 120;\n    const secondsPerBeat = 60 / beatsPerMinute;\n\n    // Add different polyrhythmic layers\n    this.playTripletLayer(chord, duration, startTime, secondsPerBeat);\n    this.playOffbeatLayer(chord, duration, startTime, secondsPerBeat);\n    this.playSixteenthLayer(chord, duration, startTime, secondsPerBeat);\n    this.playDrumLayer(duration, startTime, secondsPerBeat);\n    this.playCymbalLayer(duration, startTime, secondsPerBeat);\n  }\n\n  playTripletLayer(chord, duration, startTime, secondsPerBeat) {\n    // Play triplets (3 notes per beat) - creates 3:4 polyrhythm against main beat\n    const tripletDuration = secondsPerBeat / 3;\n    const totalTriplets = Math.floor(duration / tripletDuration);\n\n    for (let i = 0; i < totalTriplets; i++) {\n      // 40% chance to play each triplet note\n      if (Math.random() < 0.4) {\n        const noteStartTime = startTime + (i * tripletDuration);\n        const chordNote = chord[i % chord.length];\n        const tripletNote = chordNote * (1 + Math.random() * 0.5); // Vary the octave slightly\n\n        this.playPolyrhythmNote(tripletNote, tripletDuration * 0.7, noteStartTime, 'triplet');\n      }\n    }\n  }\n\n  playOffbeatLayer(chord, duration, startTime, secondsPerBeat) {\n    // Play on the off-beats (syncopation)\n    const numBeats = Math.floor(duration / secondsPerBeat);\n\n    for (let beat = 0; beat < numBeats; beat++) {\n      // Play on the \"and\" of each beat (half-beat offset)\n      if (Math.random() < 0.6) {\n        const noteStartTime = startTime + (beat * secondsPerBeat) + (secondsPerBeat / 2);\n        const chordNote = chord[(beat + 1) % chord.length];\n        const offbeatNote = chordNote * 1.5; // Perfect fifth\n\n        this.playPolyrhythmNote(offbeatNote, secondsPerBeat * 0.3, noteStartTime, 'offbeat');\n      }\n    }\n  }\n\n  playSixteenthLayer(chord, duration, startTime, secondsPerBeat) {\n    // Sparse sixteenth note patterns (4 subdivisions per beat)\n    const sixteenthDuration = secondsPerBeat / 4;\n    const totalSixteenths = Math.floor(duration / sixteenthDuration);\n\n    for (let i = 0; i < totalSixteenths; i++) {\n      // Very sparse - only 15% chance per sixteenth note\n      if (Math.random() < 0.15) {\n        const noteStartTime = startTime + (i * sixteenthDuration);\n        const chordNote = chord[Math.floor(Math.random() * chord.length)];\n        const sixteenthNote = chordNote * 2; // One octave up\n\n        this.playPolyrhythmNote(sixteenthNote, sixteenthDuration * 0.8, noteStartTime, 'sixteenth');\n      }\n    }\n  }\n\n  playPolyrhythmNote(frequency, duration, startTime, type) {\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n    const filter = this.context.createBiquadFilter();\n\n    // Different timbres for different polyrhythmic layers\n    switch (type) {\n      case 'triplet':\n        oscillator.type = 'triangle';\n        filter.type = 'bandpass';\n        filter.frequency.setValueAtTime(frequency * 1.5, startTime);\n        filter.Q.setValueAtTime(3, startTime);\n        break;\n      case 'offbeat':\n        oscillator.type = 'sawtooth';\n        filter.type = 'highpass';\n        filter.frequency.setValueAtTime(frequency * 0.8, startTime);\n        filter.Q.setValueAtTime(1, startTime);\n        break;\n      case 'sixteenth':\n        oscillator.type = 'sine';\n        filter.type = 'lowpass';\n        filter.frequency.setValueAtTime(frequency * 2, startTime);\n        filter.Q.setValueAtTime(2, startTime);\n        break;\n    }\n\n    oscillator.frequency.setValueAtTime(frequency, startTime);\n\n    // Very quiet volume for polyrhythmic elements\n    const volume = this.musicVolume * 0.08;\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.02);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n    oscillator.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + duration);\n  }\n\n  playDrumLayer(duration, startTime, secondsPerBeat) {\n    const numBeats = Math.floor(duration / secondsPerBeat);\n\n    for (let beat = 0; beat < numBeats; beat++) {\n      const beatStartTime = startTime + (beat * secondsPerBeat);\n\n      // Kick drum on beats 1 and 3 (60% chance)\n      if (beat % 2 === 0 && Math.random() < 0.6) {\n        this.playKickDrum(beatStartTime);\n      }\n\n      // Snare drum on beats 2 and 4 (70% chance)\n      if (beat % 2 === 1 && Math.random() < 0.7) {\n        this.playSnare(beatStartTime);\n      }\n\n      // Hi-hat subdivisions (every eighth note, 40% chance)\n      for (let eighth = 0; eighth < 2; eighth++) {\n        const eighthTime = beatStartTime + (eighth * secondsPerBeat / 2);\n        if (Math.random() < 0.4) {\n          this.playHiHat(eighthTime);\n        }\n      }\n    }\n  }\n\n  playCymbalLayer(duration, startTime, secondsPerBeat) {\n    const numBeats = Math.floor(duration / secondsPerBeat);\n\n    for (let beat = 0; beat < numBeats; beat++) {\n      // Crash cymbal occasionally on beat 1 (20% chance)\n      if (beat === 0 && Math.random() < 0.2) {\n        this.playCrashCymbal(startTime + (beat * secondsPerBeat));\n      }\n\n      // Ride cymbal patterns (30% chance per beat)\n      if (Math.random() < 0.3) {\n        this.playRideCymbal(startTime + (beat * secondsPerBeat));\n      }\n    }\n  }\n\n  playKickDrum(startTime) {\n    // Low-frequency thump\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n    const filter = this.context.createBiquadFilter();\n\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(60, startTime);\n    oscillator.frequency.exponentialRampToValueAtTime(40, startTime + 0.1);\n\n    filter.type = 'lowpass';\n    filter.frequency.setValueAtTime(120, startTime);\n    filter.Q.setValueAtTime(1, startTime);\n\n    const volume = this.musicVolume * 0.15;\n    gainNode.gain.setValueAtTime(volume, startTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.2);\n\n    oscillator.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + 0.2);\n  }\n\n  playSnare(startTime) {\n    // Sharp crack with noise\n    const bufferSize = this.context.sampleRate * 0.1;\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Generate noise burst\n    for (let i = 0; i < bufferSize; i++) {\n      const t = i / bufferSize;\n      const envelope = Math.exp(-t * 40);\n      output[i] = (Math.random() * 2 - 1) * envelope;\n    }\n\n    const source = this.context.createBufferSource();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    source.buffer = buffer;\n    filter.type = 'highpass';\n    filter.frequency.setValueAtTime(300, startTime);\n    filter.Q.setValueAtTime(1, startTime);\n\n    const volume = this.musicVolume * 0.12;\n    gainNode.gain.setValueAtTime(volume, startTime);\n\n    source.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    source.start(startTime);\n  }\n\n  playHiHat(startTime) {\n    // High-frequency metallic sound\n    const bufferSize = this.context.sampleRate * 0.05;\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Generate metallic noise\n    for (let i = 0; i < bufferSize; i++) {\n      const t = i / bufferSize;\n      const envelope = Math.exp(-t * 60);\n      output[i] = (Math.random() * 2 - 1) * envelope * 0.5;\n    }\n\n    const source = this.context.createBufferSource();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    source.buffer = buffer;\n    filter.type = 'highpass';\n    filter.frequency.setValueAtTime(8000, startTime);\n    filter.Q.setValueAtTime(2, startTime);\n\n    const volume = this.musicVolume * 0.08;\n    gainNode.gain.setValueAtTime(volume, startTime);\n\n    source.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    source.start(startTime);\n  }\n\n  playCrashCymbal(startTime) {\n    // Sustained metallic crash\n    const bufferSize = this.context.sampleRate * 0.8;\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n    const output = buffer.getChannelData(0);\n\n    // Generate sustained metallic noise\n    for (let i = 0; i < bufferSize; i++) {\n      const t = i / bufferSize;\n      const envelope = Math.exp(-t * 3);\n      output[i] = (Math.random() * 2 - 1) * envelope * 0.3;\n    }\n\n    const source = this.context.createBufferSource();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n\n    source.buffer = buffer;\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(5000, startTime);\n    filter.Q.setValueAtTime(0.5, startTime);\n\n    const volume = this.musicVolume * 0.1;\n    gainNode.gain.setValueAtTime(volume, startTime);\n\n    source.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    source.start(startTime);\n  }\n\n  playRideCymbal(startTime) {\n    // Metallic ping with sustain\n    const oscillator = this.context.createOscillator();\n    const gainNode = this.context.createGain();\n    const filter = this.context.createBiquadFilter();\n\n    oscillator.type = 'triangle';\n    oscillator.frequency.setValueAtTime(3000, startTime);\n    oscillator.frequency.linearRampToValueAtTime(2500, startTime + 0.3);\n\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(4000, startTime);\n    filter.Q.setValueAtTime(3, startTime);\n\n    const volume = this.musicVolume * 0.06;\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.01);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.4);\n\n    oscillator.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    oscillator.start(startTime);\n    oscillator.stop(startTime + 0.4);\n  }\n\n  playMelodyNote(frequency, duration, startTime) {\n    // Create harmonica-like melody sound\n    const fundamental = this.context.createOscillator();\n    const harmonics = this.context.createOscillator();\n    const filter = this.context.createBiquadFilter();\n    const gainNode = this.context.createGain();\n    const vibratoOsc = this.context.createOscillator();\n    const vibratoGain = this.context.createGain();\n\n    // Main harmonica sound\n    fundamental.type = 'sawtooth';\n    fundamental.frequency.setValueAtTime(frequency, startTime);\n\n    // Add harmonics\n    harmonics.type = 'triangle';\n    harmonics.frequency.setValueAtTime(frequency * 2, startTime);\n\n    // Subtle vibrato\n    vibratoOsc.type = 'sine';\n    vibratoOsc.frequency.setValueAtTime(5, startTime); // 5Hz vibrato\n    vibratoGain.gain.setValueAtTime(frequency * 0.01, startTime); // 1% vibrato depth\n\n    vibratoOsc.connect(vibratoGain);\n    vibratoGain.connect(fundamental.frequency);\n\n    // Harmonica-like filter\n    filter.type = 'bandpass';\n    filter.frequency.setValueAtTime(frequency * 1.5, startTime);\n    filter.Q.setValueAtTime(2, startTime);\n\n    // Mix and connect\n    const harmonicsGain = this.context.createGain();\n    harmonicsGain.gain.setValueAtTime(0.3, startTime);\n\n    fundamental.connect(filter);\n    harmonics.connect(harmonicsGain);\n    harmonicsGain.connect(filter);\n    filter.connect(gainNode);\n    gainNode.connect(this.musicGain);\n\n    // Gentle melody envelope (louder than chords but still subtle)\n    gainNode.gain.setValueAtTime(0, startTime);\n    gainNode.gain.linearRampToValueAtTime(this.musicVolume * 0.15, startTime + 0.1);\n    gainNode.gain.setValueAtTime(this.musicVolume * 0.12, startTime + duration * 0.8);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n\n    // Start all oscillators\n    fundamental.start(startTime);\n    harmonics.start(startTime);\n    vibratoOsc.start(startTime);\n\n    // Stop all oscillators\n    fundamental.stop(startTime + duration);\n    harmonics.stop(startTime + duration);\n    vibratoOsc.stop(startTime + duration);\n  }\n\n  stopCurrentMusic() {\n    // Stop the actual audio source if it exists\n    if (this.currentMusicSource) {\n      try {\n        this.currentMusicSource.stop();\n      } catch (e) {\n        // Audio source might already be stopped\n        console.log('Audio source already stopped');\n      }\n      this.currentMusicSource = null;\n    }\n    this.currentMusic = null;\n  }\n\n  playNextTrackManual() {\n    if (!this.musicFiles || this.musicFiles.length === 0) return;\n\n    // Stop any current music immediately\n    this.stopCurrentMusic();\n\n    // Move to next track\n    this.currentTrackIndex = (this.currentTrackIndex + 1) % this.musicFiles.length;\n\n    // Ensure we have the correct music setup\n    this.currentMusic = { melody: 'audio_files', type: 'background', startTime: this.context ? this.context.currentTime : 0 };\n\n    // Play next audio track directly - no synthesized music!\n    this.playNextAudioTrack();\n  }\n\n  playPreviousTrack() {\n    if (!this.musicFiles || this.musicFiles.length === 0) return;\n\n    this.currentTrackIndex = this.currentTrackIndex - 1;\n    if (this.currentTrackIndex < 0) {\n      this.currentTrackIndex = this.musicFiles.length - 1;\n    }\n    this.stopCurrentMusic();\n    this.startBackgroundMusic();\n  }\n\n  toggleMusicPause() {\n    if (this.isMusicPaused) {\n      // Resume music\n      this.startBackgroundMusic();\n      this.isMusicPaused = false;\n    } else {\n      // Pause music\n      this.stopCurrentMusic();\n      this.isMusicPaused = true;\n    }\n  }\n\n  getCurrentTrackInfo() {\n    if (!this.musicFiles || this.musicFiles.length === 0) {\n      return { name: 'No tracks loaded', index: 0, total: 0 };\n    }\n\n    const currentFile = this.musicFiles[this.currentTrackIndex];\n    const trackName = currentFile ? currentFile.replace(/^.*\\//, '').replace(/\\.[^/.]+$/, '') : 'Unknown';\n\n    return {\n      name: trackName,\n      index: this.currentTrackIndex + 1,\n      total: this.musicFiles.length,\n      isPaused: this.isMusicPaused || false\n    };\n  }\n\n  // Volume controls\n  setMasterVolume(volume) {\n    this.masterVolume = Math.max(0, Math.min(1, volume));\n    if (this.masterGain) {\n      this.masterGain.gain.value = this.masterVolume;\n    }\n  }\n\n  setSfxVolume(volume) {\n    this.sfxVolume = Math.max(0, Math.min(1, volume));\n  }\n\n  setMusicVolume(volume) {\n    this.musicVolume = Math.max(0, Math.min(1, volume));\n  }\n\n  mute() {\n    this.isMuted = true;\n    if (this.masterGain) {\n      this.masterGain.gain.value = 0;\n    }\n  }\n\n  unmute() {\n    this.isMuted = false;\n    if (this.masterGain) {\n      this.masterGain.gain.value = this.masterVolume;\n    }\n  }\n\n  toggleMute() {\n    if (this.isMuted) {\n      this.unmute();\n    } else {\n      this.mute();\n    }\n    return !this.isMuted;\n  }\n}\n\nexport default AudioManager;","/**\n * Complete KnockoffArcade Game - Working Version\n */\n\nimport { HighScoreManager } from './systems/HighScoreManager.js';\nimport { AudioManager } from './systems/AudioManager.js';\n\nexport class KnockoffArcade {\n  constructor() {\n    this.canvas = document.getElementById('gameCanvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.startScreen = document.getElementById('startScreen');\n    this.gameOverScreen = document.getElementById('gameOver');\n    this.scoreElement = document.getElementById('scoreValue');\n    this.livesElement = document.getElementById('livesValue');\n    this.finalScoreElement = document.getElementById('finalScore');\n    this.gameOverTitle = document.getElementById('gameOverTitle');\n    this.levelElement = document.getElementById('levelValue');\n    this.multiplierElement = document.getElementById('multiplierValue');\n    this.comboElement = document.getElementById('comboValue');\n    this.comboDisplay = document.getElementById('comboDisplay');\n    this.powerupDisplay = document.getElementById('powerupDisplay');\n    this.playerNameInput = document.getElementById('playerName');\n    this.highScoresScreen = document.getElementById('highScoresScreen');\n    this.highScoresList = document.getElementById('highScoresList');\n\n    this.gameState = 'start';\n    this.score = 0;\n    this.lives = 10;\n    this.level = 1;\n    this.combo = 0;\n    this.multiplier = 1;\n    this.balls = [];\n    this.bricks = [];\n    this.powerUps = [];\n    this.particles = [];\n    this.cavityBalls = new Set(); // Track balls in the cavity (above bricks)\n    this.cavityTimers = new Map(); // Track cavity effect timers for balls\n    this.originalSpeeds = new Map(); // Track original speeds for cavity balls\n    this.keys = {};\n\n    // Initialize high score manager\n    this.highScoreManager = new HighScoreManager();\n    this.displayHighScores();\n\n    // Initialize audio manager and start music after first user interaction\n    this.audioManager = new AudioManager();\n    this.musicStarted = false;\n\n    // Load background image\n    this.backgroundImage = new Image();\n    this.backgroundImage.src = './assets/img/background.webp';\n\n    // Load power-up icons\n    this.powerUpIcons = {};\n    this.loadPowerUpIcons();\n    this.backgroundImageLoaded = false;\n    this.backgroundImage.onload = () => {\n      this.backgroundImageLoaded = true;\n    };\n\n    this.resizeCanvas();\n    this.initializeGame();\n    this.setupEventListeners();\n    this.gameLoop();\n  }\n\n  async init() {\n    // Already initialized in constructor\n    return Promise.resolve();\n  }\n\n  resizeCanvas() {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n    \n    window.addEventListener('resize', () => {\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n      this.initializeGame();\n    });\n  }\n\n  handleResize() {\n    this.resizeCanvas();\n  }\n\n  initializeGame() {\n    const scale = Math.min(this.canvas.width, this.canvas.height) / 800;\n    \n    this.paddle = {\n      x: this.canvas.width / 2 - 60 * scale,\n      y: this.canvas.height - 50 * scale,\n      width: 120 * scale,\n      height: 15 * scale,\n      speed: 8 * scale,\n      powerUps: {}\n    };\n\n    this.ball = {\n      x: this.canvas.width / 2,\n      y: this.canvas.height / 2,\n      radius: 12 * scale,\n      speedX: 2 * scale,\n      speedY: -2 * scale,\n      powerUps: {}\n    };\n\n    this.balls = [this.ball];\n    this.createBricks();\n  }\n\n  createBricks() {\n    this.bricks = [];\n    const scale = Math.min(this.canvas.width, this.canvas.height) / 800;\n    const brickWidth = 75 * scale;\n    const brickHeight = 20 * scale;\n    const padding = 5 * scale;\n    const rows = 8;\n    const cols = Math.floor((this.canvas.width - padding * 2) / (brickWidth + padding));\n    \n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        this.bricks.push({\n          x: padding + col * (brickWidth + padding),\n          y: padding + 100 * scale + row * (brickHeight + padding),\n          width: brickWidth,\n          height: brickHeight,\n          visible: true,\n          hits: 1,\n          color: this.getBrickColor(row)\n        });\n      }\n    }\n  }\n\n  loadPowerUpIcons() {\n    const iconPath = './assets/images/powerups/';\n    const iconMappings = {\n      'dynamite': 'cactus.svg',          // Multi-ball power-up\n      'sheriff_badge': 'badge.svg',       // Destructive power-up\n      'horseshoe': 'hat.svg',            // Slow-motion power-up\n      'boots': 'boot-and-spur.svg',      // Maximum speed boost power-up (boot-with-spur as requested)\n      'whiskey': 'whiskybottle.svg'      // Paddle width increase power-up\n    };\n\n    for (const [powerUpType, iconFile] of Object.entries(iconMappings)) {\n      const img = new Image();\n      img.src = iconPath + iconFile;\n      this.powerUpIcons[powerUpType] = img;\n    }\n  }\n\n\n  getBrickColor(row) {\n    const colors = ['#dc143c', '#ff6600', '#ffd700', '#00ff7f', '#00ffff', '#8a2be2', '#ff69b4', '#deb887'];\n    return colors[row % colors.length];\n  }\n\n  setupEventListeners() {\n    // Start music on any user interaction\n    const startMusicOnInteraction = async () => {\n      if (!this.musicStarted) {\n        this.musicStarted = true;\n        await this.audioManager.startBackgroundMusic();\n        console.log('Background music started');\n      }\n    };\n\n    document.addEventListener('keydown', (e) => {\n      this.keys[e.code] = true;\n      startMusicOnInteraction();\n      \n      if (e.code === 'Space') {\n        e.preventDefault();\n        if (this.gameState === 'start') {\n          const playerName = this.playerNameInput.value.trim();\n          if (playerName.length === 0) {\n            // Shake the input field and play error sound\n            this.playerNameInput.style.border = '3px solid #dc143c';\n            this.playerNameInput.placeholder = 'ENTER YER NAME, PARTNER!';\n            this.audioManager.playSound('ballLost'); // Use error sound\n            setTimeout(() => {\n              this.playerNameInput.style.border = '';\n              this.playerNameInput.placeholder = 'ENTER YER NAME';\n            }, 2000);\n            return;\n          }\n          this.audioManager.playSound('menuConfirm');\n          this.startGame();\n        } else if (this.gameState === 'gameOver') {\n          this.audioManager.playSound('menuConfirm');\n          this.resetGame();\n        } else if (this.gameState === 'highScores') {\n          this.audioManager.playSound('menuSelect');\n          this.hideHighScores();\n        }\n      } else if (e.code === 'KeyH') {\n        // Don't intercept if input is focused\n        if (document.activeElement !== this.playerNameInput) {\n          e.preventDefault();\n          if (this.gameState === 'gameOver' || this.gameState === 'start') {\n            this.audioManager.playSound('menuSelect');\n            this.showHighScores();\n          }\n        }\n      } else if (e.code === 'KeyM') {\n        // Don't intercept if input is focused\n        if (document.activeElement !== this.playerNameInput) {\n          e.preventDefault();\n          this.audioManager.toggleMute();\n        }\n      } else if (e.code === 'KeyS') {\n        // Don't intercept if input is focused\n        if (document.activeElement !== this.playerNameInput) {\n          e.preventDefault();\n          this.audioManager.playNextTrackManual();\n          this.audioManager.playSound('menuSelect'); // Play Western sound effect\n        }\n      }\n    });\n\n    document.addEventListener('keyup', (e) => {\n      this.keys[e.code] = false;\n    });\n\n    // Mouse controls\n    this.canvas.addEventListener('mousemove', (e) => {\n      if (this.gameState === 'playing') {\n        const rect = this.canvas.getBoundingClientRect();\n        const mouseX = e.clientX - rect.left;\n        this.paddle.x = mouseX - this.paddle.width / 2;\n        \n        // Keep paddle in bounds\n        if (this.paddle.x < 0) this.paddle.x = 0;\n        if (this.paddle.x + this.paddle.width > this.canvas.width) {\n          this.paddle.x = this.canvas.width - this.paddle.width;\n        }\n      }\n    });\n\n    // Also start music on click or input events\n    document.addEventListener('click', startMusicOnInteraction);\n    document.addEventListener('input', startMusicOnInteraction);\n  }\n\n  startGame() {\n    this.gameState = 'playing';\n    this.startScreen.classList.add('hidden');\n    this.gameOverScreen.classList.add('hidden');\n    document.body.classList.add('playing');\n    this.start();\n  }\n\n  resetGame() {\n    this.score = 0;\n    this.lives = 10;\n    this.level = 1;\n    this.combo = 0;\n    this.multiplier = 1;\n    this.gameState = 'start';\n    this.startScreen.classList.remove('hidden');\n    this.gameOverScreen.classList.add('hidden');\n    document.body.classList.remove('playing');\n    this.initializeGame();\n  }\n\n  start() {\n    this.gameStarted = true;\n    this.lastTime = performance.now();\n    // Music is already started on user interaction\n  }\n\n  pause() {\n    this.gameStarted = false;\n  }\n\n  resume() {\n    this.gameStarted = true;\n    this.lastTime = performance.now();\n  }\n\n  togglePause() {\n    if (this.gameStarted) {\n      this.pause();\n    } else {\n      this.resume();\n    }\n  }\n\n  gameLoop() {\n    const currentTime = performance.now();\n    \n    if (this.gameStarted) {\n      this.update();\n      this.render();\n    }\n    \n    this.lastTime = currentTime;\n    requestAnimationFrame(() => this.gameLoop());\n  }\n\n  update() {\n    if (this.gameState !== 'playing') return;\n\n    this.updatePaddle();\n    this.updateBalls();\n    this.updatePowerUps();\n    this.updateParticles();\n    this.checkCollisions();\n    this.checkGameState();\n    this.updateUI();\n  }\n\n  updatePaddle() {\n    // Keyboard controls\n    if (this.keys.ArrowLeft || this.keys.KeyA) {\n      if (this.paddle.x > 0) {\n        this.paddle.x -= this.paddle.speed;\n      }\n    }\n    if (this.keys.ArrowRight || this.keys.KeyD) {\n      if (this.paddle.x < this.canvas.width - this.paddle.width) {\n        this.paddle.x += this.paddle.speed;\n      }\n    }\n  }\n\n  updateBalls() {\n    for (let i = this.balls.length - 1; i >= 0; i--) {\n      const ball = this.balls[i];\n\n      // Update position\n      ball.x += ball.speedX;\n      ball.y += ball.speedY;\n\n      // Check if ball is in cavity (above top row of bricks)\n      const topBrickY = 80; // Where bricks start\n      const wasInCavity = this.cavityBalls.has(ball);\n      const isInCavity = ball.y < topBrickY;\n\n      if (isInCavity && !wasInCavity) {\n        // Ball just entered cavity!\n        this.cavityBalls.add(ball);\n        this.score += 50; // Cavity entry bonus\n        this.createParticles(ball.x, ball.y, '#ffd700', 8); // Gold particles\n\n        // Store original speed and increase ball speed (SuperBreakout style!)\n        this.originalSpeeds.set(ball, {\n          speedX: ball.speedX,\n          speedY: ball.speedY\n        });\n        ball.speedX *= 1.8; // 80% speed increase\n        ball.speedY *= 1.8;\n        console.log('Ball entered cavity! Speed increased and bonus points awarded.');\n      } else if (!isInCavity && wasInCavity) {\n        // Ball left cavity - start golden effect timer\n        this.cavityBalls.delete(ball);\n        this.cavityTimers.set(ball, Date.now() + 5000); // Golden effect lasts 5 seconds after leaving cavity\n        console.log('Ball left cavity - golden effect continues for 5 seconds');\n      }\n\n      // Check if cavity timer has expired\n      if (this.cavityTimers.has(ball)) {\n        if (Date.now() > this.cavityTimers.get(ball)) {\n          this.cavityTimers.delete(ball);\n\n          // Restore original speed when cavity effect expires\n          if (this.originalSpeeds.has(ball)) {\n            const originalSpeed = this.originalSpeeds.get(ball);\n            ball.speedX = originalSpeed.speedX;\n            ball.speedY = originalSpeed.speedY;\n            this.originalSpeeds.delete(ball);\n            console.log('Golden cavity effect expired - speed restored to normal');\n          } else {\n            console.log('Golden cavity effect expired for ball');\n          }\n        }\n      }\n\n      // Wall collisions\n      if (ball.x <= ball.radius || ball.x >= this.canvas.width - ball.radius) {\n        ball.speedX = -ball.speedX;\n      }\n      if (ball.y <= ball.radius) {\n        ball.speedY = -ball.speedY;\n      }\n\n      // Bottom boundary - lose ball\n      if (ball.y >= this.canvas.height - ball.radius) {\n        this.balls.splice(i, 1);\n        this.cavityBalls.delete(ball); // Remove from cavity tracking\n        this.cavityTimers.delete(ball); // Remove cavity timer\n        this.originalSpeeds.delete(ball); // Remove speed tracking\n        this.createParticles(ball.x, ball.y, '#ff0000', 10);\n        this.audioManager.playSound('ballLost');\n      }\n    }\n    \n    // Check if all balls are lost\n    if (this.balls.length === 0) {\n      this.lives--;\n      if (this.lives <= 0) {\n        this.gameOver();\n      } else {\n        this.resetBall();\n      }\n    }\n  }\n\n  updatePowerUps() {\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      const powerUp = this.powerUps[i];\n      powerUp.y += 2; // Fall speed\n      \n      // Remove if off screen\n      if (powerUp.y > this.canvas.height) {\n        this.powerUps.splice(i, 1);\n        continue;\n      }\n      \n      // Check collision with paddle\n      if (powerUp.x < this.paddle.x + this.paddle.width &&\n          powerUp.x + powerUp.width > this.paddle.x &&\n          powerUp.y < this.paddle.y + this.paddle.height &&\n          powerUp.y + powerUp.height > this.paddle.y) {\n        \n        this.applyPowerUp(powerUp.type);\n        this.powerUps.splice(i, 1);\n        this.createParticles(powerUp.x, powerUp.y, powerUp.color, 15);\n        this.score += 250;\n        this.audioManager.playSound('powerUpCollect');\n      }\n    }\n  }\n\n  updateParticles() {\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      const particle = this.particles[i];\n      \n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      particle.life -= particle.decay;\n      \n      if (particle.life <= 0) {\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  checkCollisions() {\n    for (let ball of this.balls) {\n      // Paddle collision\n      if (ball.y + ball.radius >= this.paddle.y &&\n          ball.x >= this.paddle.x &&\n          ball.x <= this.paddle.x + this.paddle.width &&\n          ball.speedY > 0) {\n        \n        const hitPos = (ball.x - (this.paddle.x + this.paddle.width / 2)) / (this.paddle.width / 2);\n        ball.speedX = hitPos * 5;\n        ball.speedY = -Math.abs(ball.speedY);\n        this.audioManager.playSound('paddleHit');\n      }\n      \n      // Brick collisions\n      for (let brick of this.bricks) {\n        if (!brick.visible) continue;\n        \n        if (ball.x >= brick.x &&\n            ball.x <= brick.x + brick.width &&\n            ball.y >= brick.y &&\n            ball.y <= brick.y + brick.height) {\n          \n          this.hitBrick(brick, ball);\n          break;\n        }\n      }\n    }\n  }\n\n  hitBrick(brick, ball) {\n    const bricksHit = [];\n    \n    // Check if ball has spike power-up (and it hasn't expired)\n    const hasSpike = ball.powerUps.spike && ball.powerUps.spike > Date.now();\n    \n    if (hasSpike) {\n      // Find up to 3 bricks in the direction of ball movement\n      bricksHit.push(brick);\n      \n      const direction = { x: Math.sign(ball.speedX), y: Math.sign(ball.speedY) };\n      let currentBrick = brick;\n      \n      // Find next 2 bricks in the movement direction\n      for (let i = 0; i < 2; i++) {\n        const nextBrick = this.findNextBrick(currentBrick, direction);\n        if (nextBrick && nextBrick.visible) {\n          bricksHit.push(nextBrick);\n          currentBrick = nextBrick;\n        } else {\n          break;\n        }\n      }\n    } else {\n      bricksHit.push(brick);\n    }\n    \n    // Process all hit bricks\n    bricksHit.forEach(hitBrick => {\n      hitBrick.visible = false;\n\n      // Add score with cavity bonus\n      let points = 100 * this.multiplier;\n      const ballInCavity = this.cavityBalls.has(ball) || this.cavityTimers.has(ball);\n      if (ballInCavity) {\n        points *= 2; // Double points for cavity shots!\n        console.log('Cavity shot! Double points!');\n      }\n      this.score += points;\n\n      this.combo++;\n      this.audioManager.playBrickBreak();\n      this.audioManager.playComboSound(this.combo);\n      \n      // Create particles (extra for cavity shots)\n      const particleCount = hasSpike ? 15 : (ballInCavity ? 15 : 10);\n      const particleColor = ballInCavity ? '#ffd700' : hitBrick.color; // Gold for cavity shots\n      this.createParticles(hitBrick.x + hitBrick.width / 2, hitBrick.y + hitBrick.height / 2, particleColor, particleCount);\n      \n      // Random power-up drop (only from first brick) - reduced spawn rate and limit total powerups\n      if (hitBrick === brick && Math.random() < 0.08 && this.powerUps.length < 2) {\n        this.createPowerUp(hitBrick.x + hitBrick.width / 2, hitBrick.y + hitBrick.height / 2);\n      }\n    });\n    \n    // Update multiplier\n    if (this.combo > 5) {\n      this.multiplier = Math.min(5, Math.floor(this.combo / 5) + 1);\n    }\n    \n    // Only reverse ball direction if not spiked or if it's the last brick in the chain\n    if (!hasSpike) {\n      ball.speedY = -ball.speedY;\n    }\n  }\n\n  checkGameState() {\n    const remainingBricks = this.bricks.filter(brick => brick.visible);\n    if (remainingBricks.length === 0) {\n      this.levelComplete();\n    }\n  }\n\n  levelComplete() {\n    this.level++;\n    this.combo = 0;\n    this.multiplier = 1;\n    \n    const levelBonus = this.level * 1000;\n    this.score += levelBonus;\n    this.audioManager.playSound('levelComplete');\n    \n    this.createBricks();\n    this.resetBall();\n  }\n\n  resetBall() {\n    const scale = Math.min(this.canvas.width, this.canvas.height) / 800;\n    this.ball.x = this.canvas.width / 2;\n    this.ball.y = this.canvas.height / 2;\n    this.ball.speedX = (Math.random() > 0.5 ? 1 : -1) * 2 * scale;\n    this.ball.speedY = -2 * scale;\n\n    // Reset ball power-ups\n    this.ball.powerUps = {};\n\n    // Reset paddle power-ups\n    this.paddle.powerUps = {};\n\n    // Reset paddle size to normal if it was widened\n    this.paddle.width = 120 * scale;\n\n    this.balls = [this.ball];\n  }\n\n  async gameOver() {\n    this.gameState = 'gameOver';\n    document.body.classList.remove('playing');\n    this.audioManager.playSound('gameOver');\n    \n    // Check if it's a high score\n    if (this.highScoreManager.isHighScore(this.score)) {\n      const playerName = this.playerNameInput.value.trim() || 'OUTLAW';\n      const rank = this.highScoreManager.addHighScore(playerName, this.score, this.level);\n      \n      this.gameOverTitle.textContent = `NEW HIGH SCORE! RANK #${rank}`;\n      this.gameOverTitle.classList.add('win');\n      \n      // Update high scores display\n      this.displayHighScores();\n    } else {\n      this.gameOverTitle.textContent = 'GAME OVER';\n      this.gameOverTitle.classList.remove('win');\n    }\n    \n    this.gameOverScreen.classList.remove('hidden');\n    this.finalScoreElement.textContent = `Final Score: ${this.score.toLocaleString()}`;\n  }\n\n  createParticles(x, y, color, count = 10) {\n    for (let i = 0; i < count; i++) {\n      this.particles.push({\n        x: x,\n        y: y,\n        vx: (Math.random() - 0.5) * 8,\n        vy: (Math.random() - 0.5) * 8,\n        color: color,\n        size: Math.random() * 4 + 2,\n        life: 1,\n        decay: Math.random() * 0.02 + 0.01\n      });\n    }\n  }\n\n  createPowerUp(x, y) {\n    const types = ['dynamite', 'whiskey', 'horseshoe', 'boots', 'sheriff_badge'];\n    const colors = ['#8b4513', '#d2691e', '#c0c0c0', '#654321', '#ffd700'];\n    const typeIndex = Math.floor(Math.random() * types.length);\n    \n    this.powerUps.push({\n      x: x - 30, // Adjusted for larger powerup (half of 60)\n      y: y,\n      width: 60,  // 3 times larger (was 20), 1:1 aspect ratio\n      height: 60, // 3 times larger (was 20), 1:1 aspect ratio\n      type: types[typeIndex],\n      color: colors[typeIndex]\n    });\n  }\n\n  applyPowerUp(type) {\n    switch (type) {\n      case 'dynamite':\n        // Multi-ball explosion\n        if (this.balls.length < 5) {\n          const newBall = { ...this.ball };\n          newBall.speedX = -newBall.speedX;\n          // Inherit power-ups from the original ball\n          newBall.powerUps = { ...this.ball.powerUps };\n          this.balls.push(newBall);\n        }\n        break;\n      case 'whiskey':\n        // Makes paddle wider (liquid courage)\n        this.paddle.width *= 1.5;\n        break;\n      case 'boots':\n        // Speed boost (faster movement)\n        this.balls.forEach(ball => {\n          ball.speedX *= 1.5;\n          ball.speedY *= 1.5;\n        });\n        break;\n      case 'sheriff_badge':\n        // Gives ball destructive power (like spike)\n        this.balls.forEach(ball => {\n          ball.powerUps.spike = Date.now() + 10000; // 10 second timeout\n        });\n        this.audioManager.startSpikeMusic();\n        break;\n      case 'horseshoe':\n        // Lucky charm - slows things down\n        this.balls.forEach(ball => {\n          ball.speedX *= 0.5;\n          ball.speedY *= 0.5;\n        });\n        break;\n    }\n  }\n\n  updateUI() {\n    if (this.scoreElement) this.scoreElement.textContent = this.score.toLocaleString();\n    if (this.livesElement) this.livesElement.textContent = this.lives;\n    if (this.levelElement) this.levelElement.textContent = `LEVEL ${this.level}`;\n    if (this.comboElement) this.comboElement.textContent = this.combo;\n    if (this.multiplierElement) this.multiplierElement.textContent = `x${this.multiplier}`;\n  }\n\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background image if loaded\n    if (this.backgroundImageLoaded) {\n      this.ctx.drawImage(this.backgroundImage, 0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      // Fallback solid color background\n      this.ctx.fillStyle = '#2d1810';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw bricks (rough cut wood style)\n    for (let brick of this.bricks) {\n      if (brick.visible) {\n        this.drawWoodBrick(brick);\n      }\n    }\n\n    // Draw paddle\n    const gradient = this.ctx.createLinearGradient(\n      this.paddle.x, this.paddle.y,\n      this.paddle.x, this.paddle.y + this.paddle.height\n    );\n    gradient.addColorStop(0, '#deb887');\n    gradient.addColorStop(0.5, '#8b7355');\n    gradient.addColorStop(1, '#654321');\n    \n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(this.paddle.x, this.paddle.y, this.paddle.width, this.paddle.height);\n\n    // Draw balls\n    for (let ball of this.balls) {\n      const hasSpike = ball.powerUps.spike && ball.powerUps.spike > Date.now();\n      \n      if (hasSpike) {\n        // Draw spiked ball\n        this.ctx.fillStyle = '#ff6600';\n        this.ctx.strokeStyle = '#ff3300';\n        this.ctx.lineWidth = 2;\n        \n        // Draw spikes around the ball\n        this.ctx.beginPath();\n        const spikes = 8;\n        for (let i = 0; i < spikes; i++) {\n          const angle = (i * Math.PI * 2) / spikes;\n          const innerX = ball.x + Math.cos(angle) * ball.radius * 0.7;\n          const innerY = ball.y + Math.sin(angle) * ball.radius * 0.7;\n          const outerX = ball.x + Math.cos(angle) * ball.radius * 1.3;\n          const outerY = ball.y + Math.sin(angle) * ball.radius * 1.3;\n          \n          if (i === 0) {\n            this.ctx.moveTo(innerX, innerY);\n          } else {\n            this.ctx.lineTo(innerX, innerY);\n          }\n          this.ctx.lineTo(outerX, outerY);\n        }\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n        \n        // Draw inner ball\n        this.ctx.fillStyle = '#ffaa00';\n        this.ctx.beginPath();\n        this.ctx.arc(ball.x, ball.y, ball.radius * 0.6, 0, Math.PI * 2);\n        this.ctx.fill();\n      } else {\n        // Check if ball is in cavity or has active cavity timer for special glow effect\n        const inCavity = this.cavityBalls.has(ball) || this.cavityTimers.has(ball);\n\n        if (inCavity) {\n          // Draw golden glow for cavity balls\n          this.ctx.shadowBlur = 15;\n          this.ctx.shadowColor = '#ffd700';\n\n          const cavityGradient = this.ctx.createRadialGradient(\n            ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, 0,\n            ball.x, ball.y, ball.radius\n          );\n          cavityGradient.addColorStop(0, '#fff700');\n          cavityGradient.addColorStop(0.4, '#ffd700');\n          cavityGradient.addColorStop(1, '#cc9900');\n\n          this.ctx.fillStyle = cavityGradient;\n        } else {\n          // Draw normal ball\n          const ballGradient = this.ctx.createRadialGradient(\n            ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, 0,\n            ball.x, ball.y, ball.radius\n          );\n          ballGradient.addColorStop(0, '#c0c0c0');\n          ballGradient.addColorStop(0.4, '#808080');\n          ballGradient.addColorStop(1, '#404040');\n\n          this.ctx.fillStyle = ballGradient;\n        }\n\n        this.ctx.beginPath();\n        this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // Clear shadow effect\n        this.ctx.shadowBlur = 0;\n        this.ctx.shadowColor = 'transparent';\n      }\n    }\n\n    // Draw power-ups using Western icons\n    for (let powerUp of this.powerUps) {\n      this.ctx.save();\n\n      // Use icon if available, otherwise fallback to simple shape\n      const icon = this.powerUpIcons[powerUp.type];\n      if (icon && icon.complete) {\n        // Draw the Western icon\n        this.ctx.drawImage(icon, powerUp.x, powerUp.y, powerUp.width, powerUp.height);\n      } else {\n        // Fallback to colored circle\n        this.ctx.fillStyle = powerUp.color;\n        this.ctx.beginPath();\n        this.ctx.arc(powerUp.x + powerUp.width/2, powerUp.y + powerUp.height/2, powerUp.width/2, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n\n      this.ctx.restore();\n    }\n\n    // Draw particles\n    for (let particle of this.particles) {\n      this.ctx.globalAlpha = particle.life;\n      this.ctx.fillStyle = particle.color;\n      this.ctx.beginPath();\n      this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n    \n    this.ctx.globalAlpha = 1;\n  }\n\n  drawWoodBrick(brick) {\n    const ctx = this.ctx;\n    const { x, y, width, height, color } = brick;\n\n    // Create wood base color (darker version of the main color)\n    const woodColor = this.darkenColor(color, 0.3);\n\n    // Fill base with wood color\n    ctx.fillStyle = woodColor;\n    ctx.fillRect(x, y, width, height);\n\n    // Add wood grain texture with random lines\n    ctx.strokeStyle = this.darkenColor(woodColor, 0.2);\n    ctx.lineWidth = 0.5;\n    ctx.globalAlpha = 0.6;\n\n    // Draw horizontal wood grain lines\n    const grainLines = Math.floor(height / 3);\n    for (let i = 0; i < grainLines; i++) {\n      const lineY = y + (i + 1) * (height / (grainLines + 1));\n      const variance = Math.random() * 2 - 1; // Random variance for rough look\n\n      ctx.beginPath();\n      ctx.moveTo(x + 2, lineY + variance);\n\n      // Create wavy grain line\n      for (let px = 0; px <= width - 4; px += 4) {\n        const waveY = lineY + variance + Math.sin((px / width) * Math.PI * 2) * 0.5;\n        ctx.lineTo(x + 2 + px, waveY);\n      }\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n\n    // Add paint overlay with worn edges\n    ctx.fillStyle = color;\n    ctx.globalAlpha = 0.7;\n\n    // Paint doesn't cover the entire brick (worn/chipped look)\n    const paintInset = 1;\n    ctx.fillRect(\n      x + paintInset,\n      y + paintInset,\n      width - paintInset * 2,\n      height - paintInset * 2\n    );\n\n    ctx.globalAlpha = 1;\n\n    // Add rough edges and weathering\n    ctx.strokeStyle = this.darkenColor(color, 0.4);\n    ctx.lineWidth = 1;\n\n    // Draw rough wooden edges\n    ctx.beginPath();\n\n    // Top edge (slightly uneven)\n    ctx.moveTo(x, y);\n    for (let i = 0; i <= width; i += 2) {\n      const roughness = Math.random() * 0.5;\n      ctx.lineTo(x + i, y + roughness);\n    }\n\n    // Right edge\n    for (let i = 0; i <= height; i += 2) {\n      const roughness = Math.random() * 0.5;\n      ctx.lineTo(x + width - roughness, y + i);\n    }\n\n    // Bottom edge\n    for (let i = width; i >= 0; i -= 2) {\n      const roughness = Math.random() * 0.5;\n      ctx.lineTo(x + i, y + height - roughness);\n    }\n\n    // Left edge\n    for (let i = height; i >= 0; i -= 2) {\n      const roughness = Math.random() * 0.5;\n      ctx.lineTo(x + roughness, y + i);\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n\n    // Add nail holes or imperfections\n    if (Math.random() < 0.3) {\n      ctx.fillStyle = this.darkenColor(woodColor, 0.5);\n      const nailX = x + 2 + Math.random() * (width - 4);\n      const nailY = y + 2 + Math.random() * (height - 4);\n      ctx.beginPath();\n      ctx.arc(nailX, nailY, 0.5, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Add highlight on top edge for 3D effect\n    ctx.strokeStyle = this.lightenColor(color, 0.3);\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.8;\n    ctx.beginPath();\n    ctx.moveTo(x + 1, y + 1);\n    ctx.lineTo(x + width - 1, y + 1);\n    ctx.stroke();\n\n    // Add shadow on bottom edge\n    ctx.strokeStyle = this.darkenColor(woodColor, 0.3);\n    ctx.beginPath();\n    ctx.moveTo(x + 1, y + height - 1);\n    ctx.lineTo(x + width - 1, y + height - 1);\n    ctx.stroke();\n\n    ctx.globalAlpha = 1;\n  }\n\n  darkenColor(color, factor) {\n    // Convert hex to RGB and darken\n    const hex = color.replace('#', '');\n    const r = Math.max(0, parseInt(hex.substr(0, 2), 16) * (1 - factor));\n    const g = Math.max(0, parseInt(hex.substr(2, 2), 16) * (1 - factor));\n    const b = Math.max(0, parseInt(hex.substr(4, 2), 16) * (1 - factor));\n\n    return `rgb(${Math.floor(r)}, ${Math.floor(g)}, ${Math.floor(b)})`;\n  }\n\n  lightenColor(color, factor) {\n    // Convert hex to RGB and lighten\n    const hex = color.replace('#', '');\n    const r = Math.min(255, parseInt(hex.substr(0, 2), 16) * (1 + factor));\n    const g = Math.min(255, parseInt(hex.substr(2, 2), 16) * (1 + factor));\n    const b = Math.min(255, parseInt(hex.substr(4, 2), 16) * (1 + factor));\n\n    return `rgb(${Math.floor(r)}, ${Math.floor(g)}, ${Math.floor(b)})`;\n  }\n\n  getGameState() {\n    return {\n      score: this.score,\n      lives: this.lives,\n      level: this.level,\n      combo: this.combo,\n      multiplier: this.multiplier,\n      gameState: this.gameState\n    };\n  }\n\n  displayHighScores() {\n    if (this.highScoresList) {\n      this.highScoresList.innerHTML = this.highScoreManager.generateHighScoresHTML();\n    }\n  }\n\n  showHighScores() {\n    this.gameState = 'highScores';\n    this.startScreen.classList.add('hidden');\n    this.gameOverScreen.classList.add('hidden');\n    this.highScoresScreen.classList.remove('hidden');\n    this.displayHighScores();\n  }\n\n  hideHighScores() {\n    this.highScoresScreen.classList.add('hidden');\n    this.gameState = 'start';\n    this.startScreen.classList.remove('hidden');\n  }\n\n  findNextBrick(currentBrick, direction) {\n    const scale = Math.min(this.canvas.width, this.canvas.height) / 800;\n    const brickWidth = 75 * scale;\n    const brickHeight = 20 * scale;\n    const padding = 5 * scale;\n    \n    // Calculate approximate next brick position\n    const nextX = currentBrick.x + (direction.x * (brickWidth + padding));\n    const nextY = currentBrick.y + (direction.y * (brickHeight + padding));\n    \n    // Find brick at that position\n    return this.bricks.find(brick => \n      brick.visible &&\n      Math.abs(brick.x - nextX) < (brickWidth / 2) &&\n      Math.abs(brick.y - nextY) < (brickHeight / 2)\n    );\n  }\n\n}\n\nexport default KnockoffArcade;"],"names":["HighScoreManager","_classCallCheck","this","storageKey","maxScores","highScores","loadHighScores","key","value","stored","localStorage","getItem","JSON","parse","error","name","score","level","date","setItem","stringify","length","i","entry","substring","Date","toISOString","split","position","splice","slice","saveHighScores","_toConsumableArray","toLocaleString","_this","html","forEach","index","concat","formatScore","e","t","r","Symbol","n","iterator","o","toStringTag","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","l","TypeError","call","done","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","_typeof","toPrimitive","String","Number","_toPrimitive","AudioManager","sounds","Map","context","masterVolume","sfxVolume","musicVolume","isInitialized","isMuted","userHasInteracted","hasPlayedFirstTrack","backgroundMusic","spikeMusic","currentMusic","musicGain","currentMusicSource","soundDefinitions","paddleHit","type","duration","volume","envelope","attack","decay","sustain","release","brickBreak1","frequency","brickBreak2","brickBreak3","powerUpCollect","startFreq","endFreq","ballLost","levelComplete","notes","gameOver","chords","combo3","formants","combo5","combo10","menuSelect","menuConfirm","_initializeAudio","_callee","AudioContextClass","_context","window","AudioContext","webkitAudioContext","masterGain","createGain","gain","connect","destination","_resumeContext","_callee2","_context2","state","resume","_playSound","_callee3","soundName","options","soundDef","now","_t","_args3","_context3","undefined","initializeAudio","resumeContext","currentTime","playGunshot","playSpittoon","playSaloonDoor","playWhistleDown","playHarmonica","playWesternChord","playYeehaw","playYeehawBig","playSpur","playWhinny","_x","startTime","createGunshotBang","createGunshotEcho","createRicochet","bufferSize","sampleRate","buffer","createBuffer","output","getChannelData","Math","exp","noise","random","crack","sin","PI","source","createBufferSource","filter","createBiquadFilter","gainNode","setValueAtTime","Q","exponentialRampToValueAtTime","start","delay","createDelay","feedback","wetGain","delayTime","echoOsc","createOscillator","echoGain","linearRampToValueAtTime","stop","oscillator","applyEnvelope","noteDuration","noteStartTime","createHarmonicaNote","fundamental","overtone1","overtone2","vibrato","vibratoGain","mixer","overtone1Gain","overtone2Gain","_this2","chordDuration","chord","chordIndex","chordStartTime","noteIndex","noteVolume","_this3","formant","formantVolume","_this4","baseFreq","createWhinnyCall","createWhinnyBreathe","createWhinnyTail","osc1","osc2","gainParam","maxVolume","sustainLevel","randomSound","floor","playSound","comboCount","_startBackgroundMusic","_callee4","_context4","musicFiles","currentTrackIndex","melody","playNextAudioTrack","_playNextAudioTrack","_callee5","_trackPath","response","arrayBuffer","audioBuffer","trackGain","isFirstTrack","trackDuration","_this5","_context5","trackPath","fetch","ok","Error","status","decodeAudioData","setTimeout","_this6","playMelodyInternal","note","playWesternMelodyNote","playWesternHarmony","harmonics","harmonicsGain","harmonyFreq","_this7","randomChord","westernChords","playAcousticGuitar","playUprigthBass","playBanjo","playFiddle","playSimpleDrums","playRandomChords","_this8","beatOffset","strumTime","isDownstroke","stringIndex","stringTime","_this9","bassNotes","bass","beatLength","beat","noteTime","pickingPattern","sixteenthNote","_this0","melodyNotes","noteLength","beatTime","playKickDrum","playSnare","playHiHat","melodyLength","chordNotes","getChordMelodyNotes","randomNote","playMelodyNote","push","rootFreq","freq","secondsPerBeat","playTripletLayer","playOffbeatLayer","playSixteenthLayer","playDrumLayer","playCymbalLayer","tripletDuration","totalTriplets","tripletNote","playPolyrhythmNote","numBeats","offbeatNote","sixteenthDuration","totalSixteenths","beatStartTime","eighth","eighthTime","playCrashCymbal","playRideCymbal","vibratoOsc","stopCurrentMusic","startBackgroundMusic","isMusicPaused","total","currentFile","replace","isPaused","max","min","unmute","mute","KnockoffArcade","canvas","document","getElementById","ctx","getContext","startScreen","gameOverScreen","scoreElement","livesElement","finalScoreElement","gameOverTitle","levelElement","multiplierElement","comboElement","comboDisplay","powerupDisplay","playerNameInput","highScoresScreen","highScoresList","gameState","lives","combo","multiplier","balls","bricks","powerUps","particles","cavityBalls","Set","cavityTimers","originalSpeeds","keys","highScoreManager","displayHighScores","audioManager","musicStarted","backgroundImage","Image","src","powerUpIcons","loadPowerUpIcons","backgroundImageLoaded","onload","resizeCanvas","initializeGame","setupEventListeners","gameLoop","_init","width","innerWidth","height","innerHeight","addEventListener","scale","paddle","x","speed","ball","radius","speedX","speedY","createBricks","brickWidth","brickHeight","padding","cols","row","col","visible","hits","color","getBrickColor","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","powerUpType","iconFile","img","colors","startMusicOnInteraction","_ref","code","preventDefault","trim","style","border","placeholder","startGame","resetGame","hideHighScores","activeElement","showHighScores","toggleMute","playNextTrackManual","rect","getBoundingClientRect","mouseX","clientX","left","classList","add","body","remove","gameStarted","lastTime","performance","pause","update","render","requestAnimationFrame","updatePaddle","updateBalls","updatePowerUps","updateParticles","checkCollisions","checkGameState","updateUI","ArrowLeft","KeyA","ArrowRight","KeyD","wasInCavity","has","isInCavity","createParticles","set","get","originalSpeed","resetBall","powerUp","applyPowerUp","particle","vx","vy","life","_step","_iterator","_createForOfIteratorHelper","s","hitPos","abs","_step2","_iterator2","brick","hitBrick","err","bricksHit","hasSpike","spike","direction","sign","currentBrick","nextBrick","findNextBrick","points","ballInCavity","playBrickBreak","playComboSound","particleCount","particleColor","createPowerUp","levelBonus","_gameOver","playerName","rank","isHighScore","addHighScore","textContent","count","size","types","typeIndex","newBall","_objectSpread","startSpikeMusic","clearRect","drawImage","fillStyle","fillRect","_step3","_iterator3","drawWoodBrick","gradient","createLinearGradient","addColorStop","_step4","_iterator4","strokeStyle","lineWidth","beginPath","angle","innerX","cos","innerY","outerX","outerY","moveTo","lineTo","closePath","fill","stroke","arc","shadowBlur","shadowColor","cavityGradient","createRadialGradient","ballGradient","_step5","_iterator5","save","icon","complete","restore","_step6","_iterator6","globalAlpha","woodColor","darkenColor","grainLines","lineY","variance","px","waveY","paintInset","roughness","nailX","nailY","lightenColor","factor","hex","parseInt","substr","g","b","innerHTML","generateHighScoresHTML","nextX","nextY","find"],"sourceRoot":""}